
# AUTOGENERATED. DO NOT EDIT.
# Configuration file for NAMO domain. Blank lines and lines beginning with # are filtered out.

# implicity, all types require a name
Types: Can, Target, RobotPose, Robot, Grasp, Obstacle

# Define the class location of each non-standard attribute type used
# in the above parameter type description.

Attribute Import Paths:RedCircle core.util_classes.circle, BlueCircle core.util_classes.circle, GreenCircle core.util_classes.circle, Vector2d core.util_classes.matrix, Wall core.util_classes.wall

Predicates Import Path: core.util_classes.namo_predicates

Primitive Predicates: geom, Target, BlueCircle; value, Target, Vector2d; pose, Robot, Vector2d; geom, Robot, GreenCircle; value, RobotPose, Vector2d; geom, Obstacle, Wall; pose, Obstacle, Vector2d; geom, Can, RedCircle; pose, Can, Vector2d; value, Grasp, Vector2d

Derived Predicates: Obstructs, Robot, RobotPose, RobotPose, Can; IsMP, Robot; ObstructsHolding, Robot, RobotPose, RobotPose, Can, Can; Collides, Can, Obstacle; RCollides, Robot, Obstacle; GraspValid, RobotPose, Target, Grasp; InGripper, Robot, Can, Grasp; At, Can, Target; RobotAt, Robot, RobotPose; InContact, Robot, RobotPose, Target; Stationary, Can; StationaryW, Obstacle; StationaryNEq, Can, Can


# The first set of parentheses after the colon contains the
# parameters. The second contains preconditions and the third contains
# effects. This split between preconditions and effects is only used
# for task planning purposes. Our system treats all predicates
# similarly, using the numbers at the end, which specify active
# timesteps during which each predicate must hold



Action moveto 20: (?robot - Robot ?start - RobotPose ?end - RobotPose) (and (forall (?c - Can)(forall (?g - Grasp)(not (InGripper ?robot ?c ?g)))) (RobotAt ?robot ?start) (forall (?obj - Can )(not (Obstructs ?robot ?start ?end ?obj))) (forall (?obj - Can)(Stationary ?obj)) (forall (?w - Obstacle) (StationaryW ?w)) (IsMP ?robot) (forall (?w - Obstacle)(forall (?obj - Can)(not (Collides ?obj ?w)))) (forall (?w - Obstacle) (not (RCollides ?robot ?w))) )(and (not (RobotAt ?robot ?start)) (RobotAt ?robot ?end) ) 0:0 0:0 0:19 0:18 0:18 0:18 0:19 0:19 19:19 19:19 

Action movetoholding 20: (?robot - Robot ?start - RobotPose ?end - RobotPose ?c - Can ?g - Grasp) (and (RobotAt ?robot ?start) (InGripper ?robot ?c ?g) (forall (?obj - Can)(not (ObstructsHolding ?robot ?start ?end ?obj ?c))) (forall (?obj - Can) (StationaryNEq ?obj ?c)) (forall (?w - Obstacle) (StationaryW ?w)) (IsMP ?robot) (forall (?w - Obstacle)(forall (?obj - Can)(not (Collides ?obj ?w)))) (forall (?w - Obstacle) (not (RCollides ?robot ?w))) )(and (not (RobotAt ?robot ?start)) (RobotAt ?robot ?end) ) 0:0 0:19 0:19 0:18 0:18 0:18 0:19 0:19 19:19 19:19 

Action grasp 20: (?robot - Robot ?can - Can ?target - Target ?sp - RobotPose ?gp - RobotPose ?g - Grasp) (and (At ?can ?target) (RobotAt ?robot ?sp) (InContact ?robot ?gp ?target) (GraspValid ?gp ?target ?g) (forall (?obj - Can)(forall (?g - Grasp)(not (InGripper ?robot ?obj ?g)))) (forall (?obj - Can) (Stationary ?obj)) (forall (?w - Obstacle)(StationaryW ?w)) (IsMP ?robot) (forall (?w - Obstacle)(forall (?obj - Can)(not (Collides ?obj ?w)))) (forall (?w - Obstacle)(not (RCollides ?robot ?w))) (forall (?obj - Can)(not (Obstructs ?robot ?sp ?gp ?obj))) (forall (?obj - Can)(not (ObstructsHolding ?robot ?sp ?gp ?obj ?can))) )(and (not (At ?can ?target)) (not (RobotAt ?robot ?sp)) (RobotAt ?robot ?gp) (InGripper ?robot ?can ?g) (forall (?sym1 - RobotPose)(forall (?sym2 - RobotPose)(not (Obstructs ?robot ?sym1 ?sym2 ?can)))) (forall (?sym1 - Robotpose)(forall (?sym2 - RobotPose)(forall (?obj - Can) (not (ObstructsHolding ?robot ?sym1 ?sym2 ?can ?obj))))) ) 0:0 0:0 19:19 19:19 0:0 0:18 0:18 0:18 0:18 0:19 0:15 16:19 19:18 19:19 19:19 19:18 19:18 19:18 

Action putdown 20: (?robot - Robot ?can - Can ?target - Target ?pdp - RobotPose ?endp - RobotPose ?g - Grasp) (and (RobotAt ?robot ?pdp) (InContact ?robot ?pdp ?target) (GraspValid ?pdp ?target ?g) (InGripper ?robot ?can ?g) (not (InContact ?robot ?endp ?target)) (forall (?obj - Can)(Stationary ?obj)) (forall (?w - Obstacle)(StationaryW ?w)) (IsMP ?robot) (forall (?w - Obstacle)(forall (?obj - Can)(not (Collides ?obj ?w)))) (forall (?w - Obstacle)(not (RCollides ?robot ?w))) (forall (?obj - Can)(not (ObstructsHolding ?robot ?pdp ?endp ?obj ?can))) (forall (?obj - Can)(not (Obstructs ?robot ?pdp ?endp ?obj))) )(and (not (RobotAt ?robot ?pdp)) (RobotAt ?robot ?endp) (At ?can ?target) (not (InGripper ?robot ?can ?g)) ) 0:0 0:0 0:0 0:0 0:0 0:18 0:18 0:18 0:18 0:19 0:19 19:19 19:19 19:19 19:19 19:19 