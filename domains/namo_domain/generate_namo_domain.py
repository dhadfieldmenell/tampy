dom_str = """
# AUTOGENERATED. DO NOT EDIT.
# Configuration file for NAMO domain. Blank lines and lines beginning with # are filtered out.

# implicity, all types require a name
Types: Can, Target, RobotPose, Robot, Grasp, Obstacle

# Define the class location of each non-standard attribute type used
# in the above parameter type description.

Attribute Import Paths:RedCircle core.util_classes.circle, BlueCircle core.util_classes.circle, GreenCircle core.util_classes.circle, Vector2d core.util_classes.matrix, Wall core.util_classes.wall

Predicates Import Path: core.util_classes.namo_predicates

"""

class PrimitivePredicates(object):
    def __init__(self):
        self.attr_dict = {}

    def add(self, name, attrs):
        self.attr_dict[name] = attrs

    def get_str(self):
        prim_str = 'Primitive Predicates: '
        first = True
        for name, attrs in self.attr_dict.iteritems():
            for attr_name, attr_type in attrs:
                pred_str = attr_name + ', ' + name + ', ' + attr_type
                if first:
                    prim_str += pred_str
                    first = False
                else:
                    prim_str += '; ' + pred_str
        return prim_str

pp = PrimitivePredicates()
pp.add('Can', [('geom', 'RedCircle'), ('pose', 'Vector2d')])
pp.add('Target', [('geom', 'BlueCircle'), ('value', 'Vector2d')])
pp.add('RobotPose', [('value', 'Vector2d')])
pp.add('Robot', [('pose', 'Vector2d'), ('geom', 'GreenCircle')])
pp.add('Grasp', [('value', 'Vector2d')])
pp.add('Obstacle', [('geom', 'Wall'), ('pose', 'Vector2d')])
dom_str += pp.get_str() + '\n\n'

class DerivatedPredicates(object):
    def __init__(self):
        self.pred_dict = {}

    def add(self, name, args):
        self.pred_dict[name] = args

    def get_str(self):
        prim_str = 'Derived Predicates: '

        first = True
        for name, args in self.pred_dict.iteritems():
            pred_str = name
            for arg in args:
                pred_str += ', ' + arg

            if first:
                prim_str += pred_str
                first = False
            else:
                prim_str += '; ' + pred_str
        return prim_str

dp = DerivatedPredicates()
dp.add('At', ['Can', 'Target'])
dp.add('RobotAt', ['Robot', 'RobotPose'])
dp.add('InGripper', ['Robot', 'Can', 'Grasp'])
dp.add('InContact', ['Robot', 'RobotPose', 'Target'])
dp.add('Obstructs', ['Robot', 'RobotPose', 'RobotPose', 'Can'])
dp.add('ObstructsHolding', ['Robot', 'RobotPose', 'RobotPose', 'Can', 'Can'])
dp.add('GraspValid', ['RobotPose', 'Target', 'Grasp'])
dp.add('Stationary', ['Can'])
dp.add('StationaryW', ['Obstacle'])
dp.add('StationaryNEq', ['Can', 'Can'])
dp.add('IsMP', ['Robot'])
dp.add('Collides', ['Can', 'Obstacle'])
dp.add('RCollides', ['Robot', 'Obstacle'])

dom_str += dp.get_str() + '\n'

dom_str += """

# The first set of parentheses after the colon contains the
# parameters. The second contains preconditions and the third contains
# effects. This split between preconditions and effects is only used
# for task planning purposes. Our system treats all predicates
# similarly, using the numbers at the end, which specify active
# timesteps during which each predicate must hold

"""

class Action(object):
    def __init__(self, name, timesteps, pre=None, post=None):
        pass

    def to_str(self):
        time_str = ''
        cond_str = '(and '
        for pre, timesteps in self.pre:
            cond_str += pre + ' '
            time_str += timesteps + ' '
        cond_str += ')'

        cond_str += '(and '
        for eff, timesteps in self.eff:
            cond_str += eff + ' '
            time_str += timesteps + ' '
        cond_str += ')'

        return "Action " + self.name + ' ' + str(self.timesteps) + ': ' + self.args + ' ' + cond_str + ' ' + time_str

class Move(Action):
    def __init__(self):
        self.name = 'moveto'
        self.timesteps = 20
        self.args = '(?robot - Robot ?start - RobotPose ?end - RobotPose)'
        self.pre = [\
            ('(forall (?c - Can)\
                (forall (?g - Grasp)\
                    (not (InGripper ?robot ?c ?g))\
                ))', '0:0'),
            ('(RobotAt ?robot ?start)', '0:0'),
            ('(forall (?obj - Can )\
                (not (Obstructs ?robot ?start ?end ?obj)))', '0:19'),
            ('(forall (?obj - Can)\
                (Stationary ?obj))', '0:18'),
            ('(forall (?w - Obstacle) (StationaryW ?w))', '0:18'),
            ('(IsMP ?robot)', '0:18'),
            ('(forall (?w - Obstacle)\
                (forall (?obj - Can)\
                    (not (Collides ?obj ?w))\
                ))','0:19'),
            ('(forall (?w - Obstacle) (not (RCollides ?robot ?w)))', '0:19')]
        self.eff = [\
            ('(not (RobotAt ?robot ?start))', '19:19'),
            ('(RobotAt ?robot ?end)', '19:19')]

class MoveHolding(Action):
    def __init__(self):
        self.name = 'movetoholding'
        self.timesteps = 20
        self.args = '(?robot - Robot ?start - RobotPose ?end - RobotPose ?c - Can ?g - Grasp)'
        self.pre = [\
            ('(RobotAt ?robot ?start)', '0:0'),
            ('(InGripper ?robot ?c ?g)', '0:19'),
            ('(forall (?obj - Can)\
                (not (ObstructsHolding ?robot ?start ?end ?obj ?c))\
            )', '0:19'),
            ('(forall (?obj - Can) (StationaryNEq ?obj ?c))', '0:18'),
            ('(forall (?w - Obstacle) (StationaryW ?w))', '0:18'),
            ('(IsMP ?robot)', '0:18'),
            ('(forall (?w - Obstacle)\
                (forall (?obj - Can)\
                    (not (Collides ?obj ?w))\
                )\
            )', '0:19'),
            ('(forall (?w - Obstacle) (not (RCollides ?robot ?w)))', '0:19')
        ]
        self.eff = [\
            ('(not (RobotAt ?robot ?start))', '19:19'),
            ('(RobotAt ?robot ?end)', '19:19')
        ]

class Grasp(Action):
    def __init__(self):
        self.name = 'grasp'
        self.timesteps = 20
        self.args = '(?robot - Robot ?can - Can ?target - Target ?sp - RobotPose ?gp - RobotPose ?g - Grasp)'
        self.pre = [\
            ('(At ?can ?target)', '0:0'),
            ('(RobotAt ?robot ?sp)', '0:0'),
            ('(InContact ?robot ?gp ?target)', '0:0'),
            ('(GraspValid ?gp ?target ?g)', '0:0'),
            ('(forall (?obj - Can)\
                (forall (?g - Grasp)\
                    (not (InGripper ?robot ?obj ?g))\
                )\
            )', '0:0'),
            ('(forall (?obj - Can) \
                (Stationary ?obj)\
            )', '0:18'),
            ('(forall (?w - Obstacle)\
                (StationaryW ?w)\
            )', '0:18'),
            ('(IsMP ?robot)', '0:18'),
            ('(forall (?w - Obstacle)\
                (forall (?obj - Can)\
                    (not (Collides ?obj ?w))\
                )\
            )', '0:18'),
            ('(forall (?w - Obstacle)\
                (not (RCollides ?robot ?w))\
            )', '0:19'),
            ('(forall (?obj - Can)\
                (not (Obstructs ?robot ?sp ?gp ?obj))\
            )', '0:15'),
            ('(forall (?obj - Can)\
                (not (ObstructsHolding ?robot ?sp ?gp ?obj ?can))\
            )', '16:19')
        ]
        self.eff = [\
            ('(not (At ?can ?target))', '19:18') ,
            ('(not (RobotAt ?robot ?sp))', '19:19'),
            ('(RobotAt ?robot ?gp)', '19:19'),
            ('(InGripper ?robot ?can ?g)', '19:18'),
            ('(forall (?sym1 - RobotPose)\
                (forall (?sym2 - RobotPose)\
                    (not (Obstructs ?robot ?sym1 ?sym2 ?can))\
                )\
            )', '19:18'),
            ('(forall (?sym1 - Robotpose)\
                (forall (?sym2 - RobotPose)\
                    (forall (?obj - Can) (not (ObstructsHolding ?robot ?sym1 ?sym2 ?can ?obj)))\
                )\
            )', '19:18')
        ]

class Putdown(Action):
    def __init__(self):
        self.name = 'putdown'
        self.timesteps = 20
        self.args = '(?robot - Robot ?can - Can ?target - Target ?pdp - RobotPose ?endp - RobotPose ?g - Grasp)'
        self.pre = [\
            ('(RobotAt ?robot ?pdp)', '0:0'),
            ('(InContact ?robot ?pdp ?target)', '0:0'),
            ('(GraspValid ?pdp ?target ?g)', '0:0'),
            ('(InGripper ?robot ?can ?g)', '0:0'),
            # what's the purpose of the line below? So that that end pose can't
            # be used for grabbing something?
            ('(not (InContact ?robot ?endp ?target))', '0:0'),
            ('(forall (?obj - Can)\
                (Stationary ?obj)\
            )', '0:18'),
            ('(forall (?w - Obstacle)\
                (StationaryW ?w)\
            )', '0:18'),
            ('(IsMP ?robot)', '0:18'),
            ('(forall (?w - Obstacle)\
                (forall (?obj - Can)\
                    (not (Collides ?obj ?w))\
                )\
            )', '0:18'),
            ('(forall (?w - Obstacle)\
                (not (RCollides ?robot ?w))\
            )', '0:19'),
            ('(forall (?obj - Can)\
                (not (ObstructsHolding ?robot ?pdp ?endp ?obj ?can))\
            )', '0:19'),
            ('(forall (?obj - Can)\
                (not (Obstructs ?robot ?pdp ?endp ?obj))\
            )', '19:19')
        ]
        self.eff = [\
            ('(not (RobotAt ?robot ?pdp))', '19:19'),
            ('(RobotAt ?robot ?endp)', '19:19'),
            ('(At ?can ?target)', '19:19'),
            ('(not (InGripper ?robot ?can ?g))', '19:19')
        ]

actions = [Move(), MoveHolding(), Grasp(), Putdown()]
for action in actions:
    dom_str += '\n\n'
    dom_str += action.to_str()

# removes all the extra spaces
dom_str = dom_str.replace('            ', '')
dom_str = dom_str.replace('    ', '')
dom_str = dom_str.replace('    ', '')

print dom_str
f = open('namo.domain', 'w')
f.write(dom_str)
