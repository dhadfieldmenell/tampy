
# AUTOGENERATED. DO NOT EDIT.
# Configuration file for CAN domain. Blank lines and lines beginning with # are filtered out.

# implicity, all types require a name
Types: Can, Target, RobotPose, Robot, Grasp, Obstacle, Rotation

# Define the class location of each non-standard attribute type used in the above parameter type descriptions.

Attribute Import Paths: RedCircle core.util_classes.items, BlueCircle core.util_classes.items, GreenCircle core.util_classes.items, Vector1d core.util_classes.matrix, Vector2d core.util_classes.matrix, Wall core.util_classes.items, NAMO core.util_classes.robots

Predicates Import Path: core.util_classes.namo_grip_predicates

Primitive Predicates: geom, Can, RedCircle; pose, Can, Vector2d; geom, Target, BlueCircle; value, Target, Vector2d; value, RobotPose, Vector2d; gripper, RobotPose, Vector1d; geom, RobotPose, BlueCircle; geom, Robot, NAMO; pose, Robot, Vector2d; gripper, Robot, Vector1d; value, Grasp, Vector2d; geom, Obstacle, Wall; pose, Obstacle, Vector2d; value, Rotation, Vector1d; theta, Robot, Vector1d; theta, RobotPose, Vector1d; vel, RobotPose, Vector1d; acc, RobotPose, Vector1d; vel, Robot, Vector1d; acc, Robot, Vector1d

Derived Predicates: At, Can, Target; RobotAt, Robot, RobotPose; InGripper, Robot, Can, Grasp; Obstructs, Robot, Target, Target, Can; ObstructsHolding, Robot, Target, Target, Can, Can; WideObstructsHolding, Robot, Target, Target, Can, Can; StationaryRot, Robot; Stationary, Can; RobotStationary, Robot; StationaryNEq, Can, Can; IsMP, Robot; StationaryW, Obstacle; Collides, Can, Obstacle; RCollides, Robot, Obstacle; GripperClosed, Robot; Near, Can, Target;  RobotAtGrasp, Robot, Can, Grasp; RobotWithinReach, Robot, Target; RobotNearGrasp, Robot, Can, Grasp; RobotWithinBounds, Robot; WideObstructs, Robot, Target, Target, Can; AtNEq, Can, Can, Target; PoseCollides, RobotPose, Obstacle; TargetCollides, Target, Obstacle; TargetGraspCollides, Target, Obstacle, Grasp; TargetCanGraspCollides, Target, Can, Grasp; CanGraspCollides, Can, Obstacle, Grasp; HLPoseUsed, RobotPose; HLAtGrasp, Robot, Can, Grasp; RobotPoseAtGrasp, RobotPose, Target, Grasp; HLPoseAtGrasp, RobotPose, Target, Grasp; RobotRetreat, Robot, Grasp; RobotApproach, Robot, Grasp; LinearRetreat, Robot; LinearApproach, Robot; InGraspAngle, Robot, Can; NearGraspAngle, Robot, Can; ThetaDirValid, Robot; ForThetaDirValid, Robot; RevThetaDirValid, Robot; ScalarVelValid, Robot


# The first set of parentheses after the colon contains the
# parameters. The second contains preconditions and the third contains
# effects. This split between preconditions and effects is only used
# for task planning purposes. Our system treats all predicates
# similarly, using the numbers at the end, which specify active
# timesteps during which each predicate must hold



Action moveto 20: (?robot - Robot ?can - Can ?target - Target ?sp - RobotPose ?gp - RobotPose ?g - Grasp ?end - Target) (and (At ?can ?target) (forall (?gr - Grasp) (forall (?obj - Can) (not (NearGraspAngle ?robot ?obj)))) (not (GripperClosed ?robot)) (forall (?obj - Can) (Stationary ?obj)) (forall (?w - Obstacle) (StationaryW ?w)) (IsMP ?robot) (forall (?w - Obstacle) (forall (?obj - Can) (not (Collides ?obj ?w)))) (forall (?w - Obstacle) (not (RCollides ?robot ?w))) (forall (?obj - Can) (not (Obstructs ?robot ?target ?target ?obj))) (forall (?obj - Can) (not (WideObstructs ?robot ?target ?target ?obj))) (forall (?obj - Can) (not (Obstructs ?robot ?target ?target ?obj))) (forall (?obj - Can) (not (ObstructsHolding ?robot ?target ?target ?obj ?can))) )(and (NearGraspAngle ?robot ?can) (forall (?obj - Can / ?can) (forall (?gr - Grasp) (not (NearGraspAngle ?robot ?obj)))) (forall (?obj - Can) (Stationary ?obj)) (StationaryRot ?robot) (RobotStationary ?robot) ) 0:0 0:0 1:18 0:18 0:18 0:18 0:18 0:18 0:0 1:15 16:16 16:18 19:19 19:18 19:18 16:18 18:18 

Action transfer 20: (?robot - Robot ?start - RobotPose ?end - RobotPose ?c - Can ?t - Target ?g - Grasp ?init - Target) (and (At ?c ?init) (RobotStationary ?robot) (NearGraspAngle ?robot ?c) (forall (?obj - Can) (not (Near ?obj ?t))) (GripperClosed ?robot) (NearGraspAngle ?robot ?c) (forall (?obj - Can) (not (ObstructsHolding ?robot ?init ?t ?obj ?c))) (forall (?obj - Can) (not (WideObstructsHolding ?robot ?init ?t ?obj ?c))) (forall (?obj - Can) (not (ObstructsHolding ?robot ?init ?t ?obj ?c))) (forall (?obj - Can) (StationaryNEq ?obj ?c)) (forall (?w - Obstacle) (StationaryW ?w)) (IsMP ?robot) (forall (?w - Obstacle) (forall (?obj - Can) (not (Collides ?obj ?w)))) (forall (?w - Obstacle) (not (RCollides ?robot ?w))) (RobotStationary ?robot) (not (GripperClosed ?robot)) )(and (At ?c ?t) (Near ?c ?t) (not (Near ?c ?init)) (not (At ?c ?init)) (not (Obstructs ?robot ?init ?t ?c)) (not (WideObstructs ?robot ?init ?t ?c)) (forall (?obj - Can) (not (ObstructsHolding ?robot ?init ?t ?c ?obj))) (forall (?obj - Can) (not (WideObstructsHolding ?robot ?init ?t ?c ?obj))) (forall (?obj - Can) (Stationary ?obj)) ) 0:0 0:0 0:0 0:0 1:18 19:19 0:0 1:15 15:18 0:18 0:18 0:18 0:18 0:18 18:18 19:18 18:19 19:19 19:18 19:18 19:18 19:18 19:18 19:18 19:18 

Action place 6: (?robot - Robot ?start - RobotPose ?end - RobotPose ?c - Can ?t - Target ?g - Grasp ?init - Target) (and (Near ?c ?t) (NearGraspAngle ?robot ?c) (not (GripperClosed ?robot)) (forall (?obj - Can) (not (ObstructsHolding ?robot ?init ?t ?obj ?c))) (forall (?obj - Can) (not (Obstructs ?robot ?init ?t ?obj))) (forall (?obj - Can) (Stationary ?obj)) (forall (?w - Obstacle) (StationaryW ?w)) (IsMP ?robot) (forall (?w - Obstacle) (forall (?obj - Can) (not (Collides ?obj ?w)))) (forall (?w - Obstacle) (not (RCollides ?robot ?w))) (StationaryRot ?robot) (RevThetaDirValid ?robot) (RobotStationary ?robot) )(and (forall (?gr - Grasp) (forall (?obj - Can) (not (NearGraspAngle ?robot ?obj)))) (forall (?obj - Can) (Stationary ?obj)) ) 0:0 0:0 1:4 1:4 3:4 0:4 0:4 0:4 0:4 0:4 0:4 0:4 0:0 5:4 5:4 