from IPython import embed as shell
import itertools
import numpy as np
import random

SEED = 1234
NUM_PROBS = 1
NUM_CANS = 2 # each can i starts at target i, so we must have NUM_CANS <= NUM_TARGETS
NUM_TARGETS = 2
assert NUM_CANS <= NUM_TARGETS
GOAL = "(BaxterRobotAt baxter robot_end_pose)"
# GOAL = "(BaxterInGripperPos baxter can0), (BaxterInGripperRot baxter can0)"   
# GOAL = "(RobotAt baxter robot_end_pose), (BaxterInGripperPos baxter can0), (BaxterInGripperRot baxter can0)"

CAN_ROTATION_INIT = [0,0,0]
CAN_RADIUS = 0.02
CAN_HEIGHT = 0.25
CAN_GEOM = [CAN_RADIUS, CAN_HEIGHT]
DIST_BETWEEN_CANS = 0.01
# init and end robot pose(only the base)
Baxter_INIT_POSE = [0]
Baxter_END_POSE = [1.57]
# referred to as side2 pose in rapprentice
R_ARM_INIT = [0, 0, 0, 0, 0, 0, 0]
# left arm is tucked
L_ARM_INIT = [0, 0, 0, 0, 0, 0, 0]
GRIPPER_INIT = [0.]

ROBOT_DIST_FROM_TABLE = 0.05
# rll table
# TABLE_DIM = [2.235, 0.94]
# TABLE_THICKNESS = [0.2]
# TABLE_LEG_DIM = [1.3, 0.6]
# TABLE_LEG_HEIGHT = [0.6]
# TABLE_BACK = [False]

# small table
TABLE_DIM = [0.65, 1.5]
TABLE_THICKNESS = 0.2
TABLE_LEG_DIM = [.15, 0.2]
TABLE_LEG_HEIGHT = 0.6
TABLE_BACK = False
# TABLE_GEOM = []
TABLE_GEOM = [.325, .75, 0.1]
# for info in [TABLE_DIM, [TABLE_THICKNESS], TABLE_LEG_DIM, [TABLE_LEG_HEIGHT], [TABLE_BACK]]:
#     TABLE_GEOM.extend(info)

class CollisionFreeTargetValueGenerator(object):
    def __init__(self):
        self.max_x = 1.2+TABLE_DIM[0]/2 - CAN_RADIUS
        self.min_x = 2.4-self.max_x
        self.max_y = 0.08+TABLE_DIM[1]/2 - CAN_RADIUS
        self.min_y = 0.16-self.max_y
        self._poses = []

    def __iter__(self):
        return self

    def next(self):
        collides = True
        while collides:
            collides = False
            x = random.uniform(self.min_x, self.max_x)
            y = random.uniform(self.min_y, self.max_y)
            z = TABLE_LEG_HEIGHT + TABLE_THICKNESS + CAN_HEIGHT/2
            for pose in self._poses:
                diff = np.array([x - pose[0], y-pose[1]])
                if np.linalg.norm(diff) <= CAN_RADIUS*2 + DIST_BETWEEN_CANS:
                    collides = True
        pose = [x,y,z]
        self._poses.append(pose)
        return pose

    def reset(self):
        self._poses = []

def get_baxter_init_attrs_str(name):
    s = ""
    s += "(lArmPose {} {}), ".format(name, L_ARM_INIT)
    s += "(lGripper {} {}), ".format(name, GRIPPER_INIT)
    s += "(rArmPose {} {}), ".format(name, R_ARM_INIT)
    s += "(rGripper {} {}), ".format(name, GRIPPER_INIT)
    return s

def get_baxter_undefined_attrs_str(name):
    s = ""
    s += "(lArmPose {} undefined), ".format(name)
    s += "(lGripper {} undefined), ".format(name)
    s += "(rArmPose {} undefined), ".format(name)
    s += "(rGripper {} undefined), ".format(name)
    return s

def main():
    random.seed(SEED)
    target_gen = CollisionFreeTargetValueGenerator()
    for iteration in range(NUM_PROBS):
        target_gen.reset()
        s = "# AUTOGENERATED. DO NOT EDIT.\n# Configuration file for CAN problem instance. Blank lines and lines beginning with # are filtered out.\n\n"

        s += "# The values after each attribute name are the values that get passed into the __init__ method for that attribute's class defined in the domain configuration.\n"
        s += "Objects: "
        for i in range(NUM_TARGETS):
            s += "Target (name target{}); ".format(i)
            s += "EEPose (name ee_target{}); ".format(i)
            s += "RobotPose (name pdp_target{}); ".format(i)
            if i < NUM_CANS:
                s += "Can (name can{}); ".format(i)
                # s += "RobotPose (name gp_can{}); ".format(i)
        s += "Robot (name {}); ".format("baxter")
        s += "RobotPose (name {}); ".format("robot_init_pose")
        s += "RobotPose (name {}); ".format("robot_end_pose")
        s += "Obstacle (name {}) \n\n".format("table")

        s += "Init: "
        for i in range(NUM_TARGETS):
            target_pos = target_gen.next()
            s += "(geom target{} {} {}), ".format(i, CAN_GEOM[0], CAN_GEOM[1])
            s += "(value target{} {}), ".format(i, target_pos)
            s += "(rotation target{} {}),".format(i, CAN_ROTATION_INIT)
            s += "(value pdp_target{} undefined)".format(i)
            s += get_baxter_undefined_attrs_str("pdp_target{}".format(i))
            s += "(value ee_target{} undefined), ".format(i)
            s += "(rotation ee_target{} undefined), ".format(i)

            if i < NUM_CANS:
                s += "(geom can{} {} {}), ".format(i, CAN_GEOM[0], CAN_GEOM[1])
                s += "(pose can{} {}), ".format(i, target_pos)
                s += "(rotation can{} {}),".format(i, CAN_ROTATION_INIT)
                # s += "(value gp_can{} undefined), ".format(i)
        s += "(geom {}), ".format("baxter")
        # setting intial state of robot
        s += "(pose baxter {}), ".format(Baxter_INIT_POSE)
        s += get_baxter_init_attrs_str('baxter')

        s += "(value {} {}), ".format("robot_init_pose", Baxter_INIT_POSE)
        s += get_baxter_init_attrs_str('robot_init_pose')
        s += "(value {} {}), ".format("robot_end_pose", Baxter_END_POSE)
        s += get_baxter_init_attrs_str('robot_end_pose')

        # table pose
        z = TABLE_THICKNESS/2 + TABLE_LEG_HEIGHT
        s += "(pose {} [1.2, 0.08, {}]), ".format("table", z)
        s += "(rotation {} {}), ".format("table", CAN_ROTATION_INIT)
        s += "(geom {} {}); ".format("table", TABLE_GEOM)

        for i in range(NUM_CANS):
            s += "(BaxterAt can{} target{}), ".format(i, i)
            s += "(BaxterStationary can{}), ".format(i)
            for j in range(NUM_CANS):
                s += "(BaxterStationaryNEq can{} can{}), ".format(i, j)
            # s += "(InContact baxter gp_can{} target{}), ".format(i, i)
            # s += "(GraspValid gp_can{} target{} grasp0), ".format(i, i)
        for i in range(NUM_TARGETS):
            s += "(BaxterInContact baxter ee_target{} target{}), ".format(i, i)
            s += "(BaxterGraspValidPos ee_target{} target{}), ".format(i, i)
            s += "(BaxterGraspValidRot ee_target{} target{}), ".format(i, i)
            s += "(BaxterEEReachablePos baxter pdp_target{} ee_target{}), ".format(i, i)
            s += "(BaxterEEReachableRot baxter pdp_target{} ee_target{}), ".format(i, i)
        s += "(BaxterRobotAt baxter robot_init_pose), "
        s += "(BaxterStationaryArms baxter), "
        s += "(BaxterStationaryBase baxter), "
        s += "(BaxterIsMP baxter), "
        s += "(BaxterWithinJointLimit baxter), "
        s += "(BaxterStationaryW table) \n\n"

        s += "Goal: {}".format(GOAL)

        with open("baxter_probs/grasp_{}_{}.prob".format(SEED, iteration), "w") as f:
            f.write(s)

if __name__ == "__main__":
    main()
