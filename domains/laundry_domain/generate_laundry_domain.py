import sys
sys.path.insert(0, '../../src/')
import core.util_classes.baxter_constants as const
dom_str = """
# AUTOGENERATED. DO NOT EDIT.
# Configuration file for CAN domain. Blank lines and lines beginning with # are filtered out.

# implicity, all types require a name
Types: Basket, BasketTarget, RobotPose, Robot, EEPose, Obstacle, Washer, WasherPose, Cloth, ClothTarget, Rotation, Can

# Define the class location of each non-standard attribute type used in the above parameter type descriptions.

Attribute Import Paths: Baxter core.util_classes.robots, Vector1d core.util_classes.matrix, Vector3d core.util_classes.matrix, ArmPose7d core.util_classes.matrix, Table core.util_classes.items, Box core.util_classes.items, Basket core.util_classes.items, Washer core.util_classes.robots, Cloth core.util_classes.items, Can core.util_classes.items

Predicates Import Path: core.util_classes.baxter_predicates

"""

class PrimitivePredicates(object):
    def __init__(self):
        self.attr_dict = {}

    def add(self, name, attrs):
        self.attr_dict[name] = attrs

    def get_str(self):
        prim_str = 'Primitive Predicates: '
        first = True
        for name, attrs in self.attr_dict.iteritems():
            for attr_name, attr_type in attrs:
                pred_str = attr_name + ', ' + name + ', ' + attr_type
                if first:
                    prim_str += pred_str
                    first = False
                else:
                    prim_str += '; ' + pred_str
        return prim_str

pp = PrimitivePredicates()
pp.add('Basket', [('geom', 'Basket'), ('pose', 'Vector3d'), ('rotation', 'Vector3d')])
pp.add('BasketTarget', [('geom', 'Basket'), ('value', 'Vector3d'), ('rotation', 'Vector3d')])
pp.add('Cloth', [('geom', 'Cloth'), ('pose', 'Vector3d'), ('rotation', 'Vector3d')])
pp.add('ClothTarget', [('value', 'Vector3d'), ('rotation', 'Vector3d')])
pp.add('RobotPose', [('value', 'Vector1d'),
                    ('lArmPose', 'ArmPose7d'),
                    ('lGripper', 'Vector1d'),
                    ('rArmPose', 'ArmPose7d'),
                    ('rGripper', 'Vector1d')])
pp.add('Robot', [('geom', 'Baxter'),
                ('pose', 'Vector1d'),
                ('lArmPose', 'ArmPose7d'),
                ('lGripper', 'Vector1d'),
                ('rArmPose', 'ArmPose7d'),
                ('rGripper', 'Vector1d')])
pp.add('EEPose', [('value', 'Vector3d'), ('rotation', 'Vector3d')])
pp.add('Washer', [('geom', 'Washer'), ('pose', 'Vector3d'), ('rotation', 'Vector3d'), ('door', 'Vector1d')])
pp.add('WasherPose', [('geom', 'Washer'), ('value', 'Vector3d'), ('rotation', 'Vector3d'), ('door', 'Vector1d')])
pp.add('Obstacle', [('geom', 'Box'), ('pose', 'Vector3d'), ('rotation', 'Vector3d')])
pp.add('Rotation', [('value', 'Vector1d')])
pp.add('Can', [('geom', 'Can'), ('pose', 'Vector3d'), ('rotation', 'Vector3d')])
# pp.add('Fabric', [('gripleft', 'Vector3d'), ('gripright', 'Vector3d')])
dom_str += pp.get_str() + '\n\n'

class DerivatedPredicates(object):
    def __init__(self):
        self.pred_dict = {}

    def add(self, name, args):
        self.pred_dict[name] = args

    def get_str(self):
        prim_str = 'Derived Predicates: '

        first = True
        for name, args in self.pred_dict.iteritems():
            pred_str = name
            for arg in args:
                pred_str += ', ' + arg

            if first:
                prim_str += pred_str
                first = False
            else:
                prim_str += '; ' + pred_str
        return prim_str

dp = DerivatedPredicates()
dp.add('BaxterAt', ['Basket', 'BasketTarget'])
dp.add('BaxterClothAt', ['Cloth', 'ClothTarget'])
dp.add('BaxterEdgeAt', ['Can', 'ClothTarget'])
dp.add('BaxterRobotAt', ['Robot', 'RobotPose'])
dp.add('BaxterWasherAt', ['Washer', 'WasherPose'])
dp.add('BaxterIsMP', ['Robot'])
dp.add('BaxterWithinJointLimit', ['Robot'])
dp.add('BaxterWasherWithinJointLimit', ['Washer'])
dp.add('BaxterObjectWithinRotLimit', ['EEPose'])
dp.add('BaxterStationary', ['Basket'])
dp.add('BaxterStationaryCloth', ['Cloth'])
dp.add('BaxterStationaryEdge', ['Can'])
dp.add('BaxterStationaryWasher', ['Washer'])
dp.add('BaxterStationaryWasherDoor', ['Washer'])
dp.add('BaxterStationaryBase', ['Robot'])
dp.add('BaxterStationaryArms', ['Robot'])
dp.add('BaxterStationaryW', ['Obstacle'])
dp.add('BaxterObjRelPoseConstant', ['Basket', 'Cloth'])
# dp.add('BaxterBasketGraspLeftPos', ['EEPose', 'BasketTarget'])
# dp.add('BaxterBasketGraspLeftRot', ['EEPose', 'BasketTarget'])
# dp.add('BaxterBasketGraspRightPos', ['EEPose', 'BasketTarget'])
# dp.add('BaxterBasketGraspRightRot', ['EEPose', 'BasketTarget'])
dp.add('BaxterBasketGraspValidPos', ['EEPose', 'EEPose', 'BasketTarget'])
dp.add('BaxterBasketGraspValidRot', ['EEPose', 'EEPose', 'BasketTarget'])
dp.add('BaxterEEGraspValid', ['EEPose', 'Washer'])
dp.add('BaxterEEOpenedDoorGraspValid', ['EEPose', 'Washer'])
dp.add('BaxterEEClosedDoorGraspValid', ['EEPose', 'Washer'])
dp.add('BaxterEEGraspValidSide', ['EEPose', 'Washer'])

dp.add('BaxterClothGraspValid', ['EEPose', 'ClothTarget'])
dp.add('BaxterCloseGripperLeft', ['Robot'])
dp.add('BaxterCloseGripperRight', ['Robot'])
dp.add('BaxterOpenGripperLeft', ['Robot'])
dp.add('BaxterOpenGripperRight', ['Robot'])
dp.add('BaxterCloseGrippers', ['Robot'])
dp.add('BaxterOpenGrippers', ['Robot'])
dp.add('BaxterObstructs', ['Robot', 'RobotPose', 'RobotPose', 'Basket'])
dp.add('BaxterObstructsHolding', ['Robot', 'RobotPose', 'RobotPose', 'Basket', 'Basket'])
dp.add('BaxterObstructsCloth', ['Robot', 'RobotPose', 'RobotPose', 'Cloth'])
dp.add('BaxterObstructsWasher', ['Robot', 'RobotPose', 'RobotPose', 'Washer'])
dp.add('BaxterObstructsHoldingCloth', ['Robot', 'RobotPose', 'RobotPose', 'Basket', 'Cloth'])
dp.add('BaxterCollides', ['Basket', 'Obstacle'])
dp.add('BaxterRCollides', ['Robot', 'Obstacle'])
dp.add('BaxterRSelfCollides', ['Robot'])
dp.add('BaxterCollidesWasher', ['Robot', 'Washer'])
dp.add('BaxterEEReachableLeftVer', ['Robot', 'RobotPose', 'EEPose'])
dp.add('BaxterEEReachableRightVer', ['Robot', 'RobotPose', 'EEPose'])
dp.add('BaxterEEApproachLeft', ['Robot', 'RobotPose', 'EEPose'])
dp.add('BaxterEEApproachRight', ['Robot', 'RobotPose', 'EEPose'])
dp.add('BaxterEERetreatLeft', ['Robot', 'RobotPose', 'EEPose'])
dp.add('BaxterEERetreatRight', ['Robot', 'RobotPose', 'EEPose'])
dp.add('BaxterEEApproachOpenDoorLeft', ['Robot', 'RobotPose', 'EEPose'])
dp.add('BaxterEEApproachCloseDoorLeft', ['Robot', 'RobotPose', 'EEPose'])
dp.add('BaxterEERetreatOpenDoorLeft', ['Robot', 'RobotPose', 'EEPose'])
dp.add('BaxterEERetreatCloseDoorLeft', ['Robot', 'RobotPose', 'EEPose'])
dp.add('BaxterBasketInGripper', ['Robot', 'Basket'])
dp.add('BaxterWasherInGripper', ['Robot', 'Washer'])
dp.add('BaxterClothInGripperLeft', ['Robot', 'Cloth'])
dp.add('BaxterClothInGripperRight', ['Robot', 'Cloth'])
dp.add('BaxterBasketLevel', ['Basket'])
dp.add('BaxterPushWasher', ['Robot', 'Washer'])
dp.add('BaxterPushInsideWasher', ['Robot', 'Washer'])
dp.add('BaxterPushOutsideWasher', ['Robot', 'Washer'])
dp.add('BaxterPushOutsideCloseWasher', ['Robot', 'Washer'])
dp.add('BaxterClothTargetInWasher', ['ClothTarget', 'WasherPose'])
dp.add('BaxterClothTargetInBasket', ['ClothTarget', 'BasketTarget'])
dp.add('BaxterGrippersCenteredOverBasket', ['Robot', 'Basket'])
dp.add('BaxterPoseAtRotation', ['RobotPose', 'Rotation'])
dp.add('BaxterWithinRotLimit', ['Robot'])
dp.add('BaxterGripperAtLeft', ['Robot', 'EEPose'])
dp.add('BaxterGripperAtRight', ['Robot', 'EEPose'])
dp.add('BaxterBasketInGripperShallow', ['Robot', 'Basket'])
dp.add('BaxterBasketGraspValidShallowPos', ['EEPose', 'EEPose', 'BasketTarget'])
dp.add('BaxterClothAtPose', ['Cloth', 'EEPose'])
dp.add('BaxterClothAtHandle', ['Cloth', 'BasketTarget'])
dp.add('BaxterClothBothGraspValidLeft', ['EEPose', 'ClothTarget', 'Can'])
dp.add('BaxterClothBothGraspValidRight', ['EEPose', 'ClothTarget', 'Can'])
dp.add('BaxterBothEndsInGripper', ['Robot', 'Can'])

dom_str += dp.get_str() + '\n'

dom_str += """

# The first set of parentheses after the colon contains the
# parameters. The second contains preconditions and the third contains
# effects. This split between preconditions and effects is only used
# for task planning purposes. Our system treats all predicates
# similarly, using the numbers at the end, which specify active
# timesteps during which each predicate must hold

"""

class Action(object):
    def __init__(self, name, timesteps, pre=None, post=None):
        pass

    def to_str(self):
        time_str = ''
        cond_str = '(and '
        for pre, timesteps in self.pre:
            cond_str += pre + ' '
            time_str += timesteps + ' '
        cond_str += ')'

        cond_str += '(and '
        for eff, timesteps in self.eff:
            cond_str += eff + ' '
            time_str += timesteps + ' '
        cond_str += ')'

        return "Action " + self.name + ' ' + str(self.timesteps) + ': ' + self.args + ' ' + cond_str + ' ' + time_str

class Move(Action):
    def __init__(self):
        self.name = 'moveto'
        self.timesteps = 30
        end = self.timesteps - 1
        self.args = '(?robot - Robot ?start - RobotPose ?end - RobotPose)'
        self.pre = [\
            ('(forall (?obj - Basket)\
                (not (BaxterBasketInGripper ?robot ?obj))\
            )', '{}:{}'.format(0, 0)),
            ('(BaxterRobotAt ?robot ?start)', '{}:{}'.format(0, 0)),
            ('(forall (?obj - Basket)\
                (not (BaxterObstructs ?robot ?start ?end ?obj)))', '{}:{}'.format(0, end-1)),
            ('(forall (?obj - Washer)\
                (not (BaxterCollidesWasher ?robot ?obj)))', '{}:{}'.format(0, end-1)),
            ('(BaxterStationaryBase ?robot)', '{}:{}'.format(0, end-1)),
            ('(forall (?obj - Basket)\
                (BaxterStationary ?obj))', '{}:{}'.format(0, end-1)),
            ('(forall (?obs - Cloth) (BaxterStationaryCloth ?obs))', '0:{}'.format(end-1)),
            ('(forall (?obs - Can) (BaxterStationaryEdge ?obs))', '0:{}'.format(end-1)),
            ('(forall (?obj - Washer)\
                (BaxterStationaryWasher ?obj))', '{}:{}'.format(0, end-1)),
            ('(forall (?obj - Washer)\
                (BaxterStationaryWasherDoor ?obj))', '{}:{}'.format(0, end-1)),
            ('(forall (?obs - Obstacle) (BaxterStationaryW ?obs))', '{}:{}'.format(0, end-1)),
            ('(forall (?basket - Basket) (BaxterBasketLevel ?basket))', '{}:{}'.format(0, end)),
            ('(BaxterIsMP ?robot)', '{}:{}'.format(0, end-1)),
            ('(BaxterWithinJointLimit ?robot)', '{}:{}'.format(0, end)),
            ('(BaxterOpenGrippers ?robot)', '{}:{}'.format(1, end-1)),
            ('(forall (?w - Obstacle) (not (BaxterRCollides ?robot ?w)))', '{}:{}'.format(0, end)),
            ('(not (BaxterRSelfCollides ?robot))', '1:{}'.format(end-1)),
        ]
        self.eff = [\
            (' (not (BaxterRobotAt ?robot ?start))', '{}:{}'.format(end, end-1)),
            ('(BaxterRobotAt ?robot ?end)', '{}:{}'.format(end, end))]

class MoveNoCollisionCheck(Action):
    def __init__(self):
        self.name = 'move_no_collision_check'
        self.timesteps = 30
        end = self.timesteps - 1
        self.args = '(?robot - Robot ?start - RobotPose ?end - RobotPose)'
        self.pre = [\
            ('(forall (?obj - Basket)\
                (not (BaxterBasketInGripper ?robot ?obj))\
            )', '{}:{}'.format(0, 0)),
            ('(BaxterRobotAt ?robot ?start)', '{}:{}'.format(0, 0)),
            ('(BaxterStationaryBase ?robot)', '{}:{}'.format(0, end-1)),
            ('(forall (?obj - Basket)\
                (BaxterStationary ?obj))', '{}:{}'.format(0, end-1)),
            ('(forall (?obs - Cloth) (BaxterStationaryCloth ?obs))', '0:{}'.format(end-1)),
            ('(forall (?obs - Can) (BaxterStationaryEdge ?obs))', '0:{}'.format(end-1)),
            ('(forall (?obj - Washer)\
                (BaxterStationaryWasher ?obj))', '{}:{}'.format(0, end-1)),
            ('(forall (?obj - Washer)\
                (BaxterStationaryWasherDoor ?obj))', '{}:{}'.format(0, end-1)),
            ('(forall (?obs - Obstacle) (BaxterStationaryW ?obs))', '{}:{}'.format(0, end-1)),
            ('(forall (?basket - Basket) (BaxterBasketLevel ?basket))', '{}:{}'.format(0, end)),
            ('(BaxterIsMP ?robot)', '{}:{}'.format(0, end-1)),
            ('(BaxterWithinJointLimit ?robot)', '{}:{}'.format(0, end)),
            ('(BaxterOpenGrippers ?robot)', '{}:{}'.format(1, end-1)),
            ('(forall (?w - Obstacle) (not (BaxterRCollides ?robot ?w)))', '{}:{}'.format(0, end)),
            ('(not (BaxterRSelfCollides ?robot))', '1:{}'.format(end-1)),
        ]
        self.eff = [\
            (' (not (BaxterRobotAt ?robot ?start))', '{}:{}'.format(end, end-1)),
            ('(BaxterRobotAt ?robot ?end)', '{}:{}'.format(end, end))]

class MoveAroundWasher(Action):
    def __init__(self):
        self.name = 'move_around_washer'
        self.timesteps = 30
        end = self.timesteps - 1
        self.args = '(?robot - Robot ?start - RobotPose ?end - RobotPose)'
        self.pre = [\
            ('(forall (?obj - Basket)\
                (not (BaxterBasketInGripper ?robot ?obj))\
            )', '{}:{}'.format(0, 0)),
            ('(BaxterRobotAt ?robot ?start)', '{}:{}'.format(0, 0)),
            ('(forall (?obj - Basket)\
                (not (BaxterObstructs ?robot ?start ?end ?obj)))', '{}:{}'.format(0, end-1)),
            ('(forall (?obj - Washer)\
                (not (BaxterObstructsWasher ?robot ?start ?end ?obj)))', '{}:{}'.format(0, end-1)),
            ('(BaxterStationaryBase ?robot)', '{}:{}'.format(0, end-1)),
            ('(forall (?obj - Basket)\
                (BaxterStationary ?obj))', '{}:{}'.format(0, end-1)),
            ('(forall (?obs - Cloth) (BaxterStationaryCloth ?obs))', '0:{}'.format(end-1)),
            ('(forall (?obs - Can) (BaxterStationaryEdge ?obs))', '0:{}'.format(end-1)),
            ('(forall (?obj - Washer)\
                (BaxterStationaryWasher ?obj))', '{}:{}'.format(0, end-1)),
            ('(forall (?obj - Washer)\
                (BaxterStationaryWasherDoor ?obj))', '{}:{}'.format(0, end-1)),
            ('(forall (?obs - Obstacle) (BaxterStationaryW ?obs))', '{}:{}'.format(0, end-1)),
            ('(forall (?basket - Basket) (BaxterBasketLevel ?basket))', '{}:{}'.format(0, end)),
            ('(BaxterIsMP ?robot)', '{}:{}'.format(0, end-1)),
            ('(BaxterWithinJointLimit ?robot)', '{}:{}'.format(0, end)),
            ('(BaxterOpenGrippers ?robot)', '{}:{}'.format(1, end-1)),
            ('(forall (?w - Obstacle) (not (BaxterRCollides ?robot ?w)))', '{}:{}'.format(0, end)),
            ('(not (BaxterRSelfCollides ?robot))', '1:{}'.format(end-1)),
        ]
        self.eff = [\
            (' (not (BaxterRobotAt ?robot ?start))', '{}:{}'.format(end, end-1)),
            ('(BaxterRobotAt ?robot ?end)', '{}:{}'.format(end, end))]

class MoveHoldingBasket(Action):
    def __init__(self):
        self.name = 'moveholding_basket'
        self.timesteps = 20
        end = self.timesteps - 1
        self.args = '(?robot - Robot ?start - RobotPose ?end - RobotPose ?basket - Basket)'
        self.pre = [\
            ('(BaxterRobotAt ?robot ?start)', '0:0'),
            ('(BaxterBasketInGripper ?robot ?basket)', '0:{}'.format(end)),
            ('(BaxterCloseGrippers ?robot)', '0:{}'.format(end)),
            ('(forall (?obj - Basket)\
                (not (BaxterObstructsHolding ?robot ?start ?end ?obj ?basket))\
            )', '0:{}'.format(end)),
            ('(forall (?obj - Washer)\
                (not (BaxterObstructsWasher ?robot ?start ?end ?obj)))', '{}:{}'.format(0, end-1)),
            ('(BaxterStationaryBase ?robot)', '{}:{}'.format(0, end-1)),
            ('(forall (?obs - Washer) (BaxterStationaryWasher ?obs))', '0:{}'.format(end-1)),
            ('(forall (?obs - Washer) (BaxterStationaryWasherDoor ?obs))', '0:{}'.format(end-1)),
            ('(forall (?obs - Obstacle) (BaxterStationaryW ?obs))', '0:{}'.format(end-1)),
            ('(BaxterIsMP ?robot)', '0:{}'.format(end-1)),
            ('(BaxterWithinJointLimit ?robot)', '0:{}'.format(end)),
            ('(BaxterBasketLevel ?basket)', '{}:{}'.format(0, end)),
            ('(forall (?obs - Obstacle)\
                (forall (?obj - Basket)\
                    (not (BaxterCollides ?obj ?obs))\
                )\
            )', '0:{}'.format(end)),
            ('(not (BaxterRSelfCollides ?robot))', '1:{}'.format(end-1)),
            ('(forall (?obs - Obstacle) (not (BaxterRCollides ?robot ?obs)))', '0:{}'.format(end))
        ]
        self.eff = [\
            (' (BaxterBasketInGripper ?robot ?basket)', '0:{}'.format(end)),
            ('(not (BaxterRobotAt ?robot ?start))', '{}:{}'.format(end, end-1)),
            ('(BaxterRobotAt ?robot ?end)', '{}:{}'.format(end, end))
        ]

class MoveHoldingCloth(Action):
    def __init__(self):
        self.name = 'moveholding_cloth'
        self.timesteps = 20
        end = self.timesteps - 1
        self.args = '(?robot - Robot ?start - RobotPose ?end - RobotPose ?cloth - Cloth)'
        self.pre = [\
            ('(BaxterRobotAt ?robot ?start)', '0:0'),
            # ('(BaxterClothInGripperLeft ?robot ?cloth)', '0:{}'.format(end)),
            ('(BaxterCloseGrippers ?robot)', '0:{}'.format(end)),
            ('(forall (?obj - Basket)\
                (not (BaxterObstructsHoldingCloth ?robot ?start ?end ?obj ?cloth))\
            )', '0:{}'.format(end)),
            ('(forall (?obj - Washer)\
                (not (BaxterCollidesWasher ?robot ?obj)))', '{}:{}'.format(0, end-1)),
            ('(forall (?obj - Basket)\
                (BaxterStationary ?obj))', '{}:{}'.format(0, end-1)),
            ('(BaxterStationaryBase ?robot)', '{}:{}'.format(0, end-1)),
            ('(forall (?obs - Washer) (BaxterStationaryWasher ?obs))', '0:{}'.format(end-1)),
            ('(forall (?obs - Washer) (BaxterStationaryWasherDoor ?obs))', '0:{}'.format(end-1)),
            ('(forall (?obs - Obstacle) (BaxterStationaryW ?obs))', '0:{}'.format(end-1)),
            ('(BaxterIsMP ?robot)', '0:{}'.format(end-1)),
            ('(BaxterWithinJointLimit ?robot)', '0:{}'.format(end)),
            ('(forall (?obs - Obstacle)\
                (forall (?obj - Basket)\
                    (not (BaxterCollides ?obj ?obs))\
                )\
            )', '0:{}'.format(end)),
            ('(not (BaxterRSelfCollides ?robot))', '1:{}'.format(end-1)),
            ('(forall (?obs - Obstacle) (not (BaxterRCollides ?robot ?obs)))', '0:{}'.format(end))
        ]
        self.eff = [\
            ('(BaxterClothInGripperLeft ?robot ?cloth)', '{}:{}'.format(end, end)),
            ('(not (BaxterRobotAt ?robot ?start))', '{}:{}'.format(end, end-1)),
            ('(BaxterRobotAt ?robot ?end)', '{}:{}'.format(end, end))
        ]

class BothMoveClothTo(Action):
    def __init__(self):
        self.name = 'both_move_cloth_to'
        self.timesteps = 20
        end = self.timesteps - 1
        self.args = '(?robot - Robot  ?cloth - Can ?target - ClothTarget ?start - RobotPose ?end - RobotPose)'
        self.pre = [\
            ('(BaxterRobotAt ?robot ?start)', '0:0'),
            ('(BaxterBothEndsInGripper ?robot ?cloth)', '0:{}'.format(end)),
            ('(BaxterCloseGrippers ?robot)', '0:{}'.format(end)),
            ('(forall (?obj - Basket)\
                (not (BaxterObstructs ?robot ?start ?end ?obj))\
            )', '0:{}'.format(end)),
            ('(forall (?obj - Washer)\
                (not (BaxterCollidesWasher ?robot ?obj)))', '{}:{}'.format(0, end-1)),
            ('(forall (?obj - Basket)\
                (BaxterStationary ?obj))', '{}:{}'.format(0, end-1)),
            ('(BaxterStationaryBase ?robot)', '{}:{}'.format(0, end-1)),
            ('(forall (?obs - Washer) (BaxterStationaryWasher ?obs))', '0:{}'.format(end-1)),
            ('(forall (?obs - Washer) (BaxterStationaryWasherDoor ?obs))', '0:{}'.format(end-1)),
            ('(forall (?obs - Obstacle) (BaxterStationaryW ?obs))', '0:{}'.format(end-1)),
            ('(BaxterIsMP ?robot)', '0:{}'.format(end-1)),
            ('(BaxterWithinJointLimit ?robot)', '0:{}'.format(end)),
            ('(forall (?obs - Obstacle)\
                (forall (?obj - Basket)\
                    (not (BaxterCollides ?obj ?obs))\
                )\
            )', '0:{}'.format(end)),
            ('(not (BaxterRSelfCollides ?robot))', '1:{}'.format(end-1)),
            ('(forall (?obs - Obstacle) (not (BaxterRCollides ?robot ?obs)))', '0:{}'.format(end))
        ]
        self.eff = [\
            ('(not (BaxterRobotAt ?robot ?start))', '{}:{}'.format(end, end-1)),
            ('(BaxterRobotAt ?robot ?end)', '{}:{}'.format(end, end)),
            ('(BaxterEdgeAt ?cloth ?target)', '{}:{}'.format(end, end))
        ]
class MoveHoldingBasketWithCloth(Action):
    def __init__(self):
        self.name = 'moveholding_basket_with_cloth'
        self.timesteps = 20
        end = self.timesteps - 1
        self.args = '(?robot - Robot ?start - RobotPose ?end - RobotPose ?basket - Basket)'
        self.pre = [\
            ('(BaxterRobotAt ?robot ?start)', '0:0'),
            ('(BaxterBasketInGripper ?robot ?basket)', '0:{}'.format(end)),
            ('(BaxterCloseGrippers ?robot)', '0:{}'.format(end)),
            ('(forall (?obj - Basket)\
                (not (BaxterObstructsHolding ?robot ?start ?end ?obj ?basket))\
            )', '0:{}'.format(end)),
            ('(forall (?obj - Washer)\
                (not (BaxterObstructsWasher ?robot ?start ?end ?obj)))', '{}:{}'.format(0, end-1)),
            ('(BaxterStationaryBase ?robot)', '{}:{}'.format(0, end-1)),
            ('(forall (?obs - Washer) (BaxterStationaryWasher ?obs))', '0:{}'.format(end-1)),
            ('(forall (?obs - Washer) (BaxterStationaryWasherDoor ?obs))', '0:{}'.format(end-1)),
            ('(forall (?obs - Obstacle) (BaxterStationaryW ?obs))', '0:{}'.format(end-1)),
            ('(BaxterIsMP ?robot)', '0:{}'.format(end-1)),
            ('(BaxterWithinJointLimit ?robot)', '0:{}'.format(end)),
            ('(BaxterBasketLevel ?basket)', '{}:{}'.format(0, end)),
            ('(forall (?obs - Obstacle)\
                (forall (?obj - Basket)\
                    (not (BaxterCollides ?obj ?obs))\
                )\
            )', '0:{}'.format(end)),
            # ('(not (BaxterRSelfCollides ?robot))', '0:{}'.format(end)),
            ('(forall (?obs - Obstacle) (not (BaxterRCollides ?robot ?obs)))', '0:{}'.format(end)),
            ('(forall (?cloth - Cloth) (BaxterObjRelPoseConstant ?basket ?cloth))', '0:{}'.format(end))
        ]
        self.eff = [\
            ('(BaxterBasketInGripper ?robot ?basket)', '0:{}'.format(end)),
            ('(not (BaxterRobotAt ?robot ?start))', '{}:{}'.format(end, end-1)),
            ('(BaxterRobotAt ?robot ?end)', '{}:{}'.format(end, end))
        ]

class Grasp(Action):
    def __init__(self):
        self.name = 'basket_grasp'
        self.timesteps = 2 * const.EEREACHABLE_STEPS + 11
        end = self.timesteps - 1
        self.args = '(?robot - Robot ?basket - Basket ?target - BasketTarget ?sp - RobotPose ?ee_left - EEPose ?ee_right - EEPose ?ep - RobotPose)'
        grasp_time = const.EEREACHABLE_STEPS + 5
        approach_time = 5
        retreat_time = end-5
        self.pre = [\
            ('(BaxterAt ?basket ?target)', '0:{}'.format(grasp_time)),
            ('(BaxterRobotAt ?robot ?sp)', '0:0'),
            ('(BaxterEEReachableLeftVer ?robot ?sp ?ee_left)', '{}:{}'.format(grasp_time, grasp_time)),
            ('(BaxterEEReachableRightVer ?robot ?sp ?ee_right)', '{}:{}'.format(grasp_time, grasp_time)),
            ('(BaxterOpenGrippers ?robot)', '{}:{}'.format(0,  grasp_time-1)),
            ('(BaxterCloseGrippers ?robot)', '{}:{}'.format(grasp_time,  end)),
            # ('(BaxterBasketGraspLeftPos ?ee_left ?target)', '{}:{}'.format(grasp_time, grasp_time)),
            # ('(BaxterBasketGraspLeftRot ?ee_left ?target)', '{}:{}'.format(grasp_time, grasp_time)),
            # ('(BaxterBasketGraspRightPos ?ee_right ?target)', '{}:{}'.format(grasp_time, grasp_time)),
            # ('(BaxterBasketGraspRightRot ?ee_right ?target)', '{}:{}'.format(grasp_time, grasp_time)),
            ('(BaxterBasketGraspValidPos ?ee_left ?ee_right ?target)', '{}:{}'.format(grasp_time, grasp_time)),
            ('(BaxterBasketGraspValidRot ?ee_left ?ee_right ?target)', '{}:{}'.format(grasp_time, grasp_time)),
            ('(BaxterBasketInGripper ?robot ?basket)', '{}:{}'.format(grasp_time, end)),
            ('(forall (?obj - Basket)\
                (not (BaxterBasketInGripper ?robot ?basket))\
            )', '0:{}'.format(grasp_time-1)),
            ('(BaxterBasketLevel ?basket)', '{}:{}'.format(0, end)),
            ('(forall (?obj - Basket) \
                (BaxterStationary ?obj)\
            )', '0:{}'.format(grasp_time-1)),
            ('(forall (?obs - Washer) (BaxterStationaryWasher ?obs))', '{}:{}'.format(0, end-1)),
            ('(forall (?obs - Washer) (BaxterStationaryWasherDoor ?obs))', '0:{}'.format(end-1)),
            ('(forall (?obs - Obstacle)\
                (BaxterStationaryW ?obs)\
            )', '{}:{}'.format(0, end-1)),
            ('(BaxterStationaryBase ?robot)', '{}:{}'.format(0, end-1)),
            # ('(BaxterStationaryBase ?robot)', '{}:{}'.format(approach_time, retreat_time-1)),
            ('(BaxterIsMP ?robot)', '0:{}'.format(end-1)),
            ('(BaxterWithinJointLimit ?robot)', '0:{}'.format(end)),
            ('(forall (?obs - Obstacle)\
                (forall (?obj - Basket)\
                    (not (BaxterCollides ?obj ?obs))\
                )\
            )', '0:{}'.format(end-1)),
            ('(not (BaxterRSelfCollides ?robot))', '0:{}'.format(end)),
            ('(forall (?obs - Obstacle)\
                (not (BaxterRCollides ?robot ?obs))\
            )', '0:{}'.format(end)),
            ('(forall (?obj - Basket)\
                (not (BaxterObstructs ?robot ?sp ?ep ?obj))\
            )', '0:{}'.format(grasp_time-1)),
            ('(forall (?obj - Basket)\
                (not (BaxterObstructsHolding ?robot ?sp ?ep ?obj ?basket))\
            )', '{}:{}'.format(grasp_time, end))
        ]
        self.eff = [\
            ('(not (BaxterAt ?basket ?target))', '{}:{}'.format(end, end-1)) ,
            ('(not (BaxterRobotAt ?robot ?sp))', '{}:{}'.format(end, end-1)),
            ('(BaxterRobotAt ?robot ?ep)', '{}:{}'.format(end, end)),
            ('(BaxterBasketInGripper ?robot ?basket)', '{}:{}'.format(end, end)),
            ('(forall (?sym1 - RobotPose)\
                (forall (?sym2 - RobotPose)\
                    (not (BaxterObstructs ?robot ?sym1 ?sym2 ?basket))\
                )\
            )', '{}:{}'.format(end, end-1)),
            ('(forall (?sym1 - Robotpose)\
                (forall (?sym2 - RobotPose)\
                    (forall (?obj - Basket) (not (BaxterObstructsHolding ?robot ?sym1 ?sym2 ?basket ?obj)))\
                )\
            )', '{}:{}'.format(end, end-1))
        ]

class GraspWithCloth(Action):
    def __init__(self):
        self.name = 'basket_grasp_with_cloth'
        self.timesteps = 2 * const.EEREACHABLE_STEPS + 11
        end = self.timesteps - 1
        self.args = '(?robot - Robot ?basket - Basket ?target - BasketTarget ?sp - RobotPose ?ee_left - EEPose ?ee_right - EEPose ?ep - RobotPose)'
        grasp_time = const.EEREACHABLE_STEPS + 5
        approach_time = 5
        retreat_time = end-5
        self.pre = [\
            ('(BaxterAt ?basket ?target)', '0:{}'.format(grasp_time)),
            ('(BaxterRobotAt ?robot ?sp)', '0:0'),
            ('(BaxterEEReachableLeftVer ?robot ?sp ?ee_left)', '{}:{}'.format(grasp_time, grasp_time)),
            ('(BaxterEEReachableRightVer ?robot ?sp ?ee_right)', '{}:{}'.format(grasp_time, grasp_time)),
            ('(BaxterOpenGrippers ?robot)', '{}:{}'.format(0,  grasp_time-1)),
            ('(BaxterCloseGrippers ?robot)', '{}:{}'.format(grasp_time,  end)),
            # ('(BaxterBasketGraspLeftPos ?ee_left ?target)', '{}:{}'.format(grasp_time, grasp_time)),
            # ('(BaxterBasketGraspLeftRot ?ee_left ?target)', '{}:{}'.format(grasp_time, grasp_time)),
            # ('(BaxterBasketGraspRightPos ?ee_right ?target)', '{}:{}'.format(grasp_time, grasp_time)),
            # ('(BaxterBasketGraspRightRot ?ee_right ?target)', '{}:{}'.format(grasp_time, grasp_time)),
            ('(BaxterBasketGraspValidPos ?ee_left ?ee_right ?target)', '{}:{}'.format(grasp_time, grasp_time)),
            ('(BaxterBasketGraspValidRot ?ee_left ?ee_right ?target)', '{}:{}'.format(grasp_time, grasp_time)),
            ('(BaxterBasketInGripper ?robot ?basket)', '{}:{}'.format(grasp_time, end)),
            ('(forall (?obj - Basket)\
                (not (BaxterBasketInGripper ?robot ?basket))\
            )', '0:{}'.format(grasp_time-1)),
            ('(BaxterBasketLevel ?basket)', '{}:{}'.format(0, end)),
            ('(forall (?obj - Basket) \
                (BaxterStationary ?obj)\
            )', '0:{}'.format(grasp_time-1)),
            ('(forall (?obs - Washer) (BaxterStationaryWasher ?obs))', '{}:{}'.format(0, end-1)),
            ('(forall (?obs - Washer) (BaxterStationaryWasherDoor ?obs))', '0:{}'.format(end-1)),
            ('(forall (?obs - Obstacle)\
                (BaxterStationaryW ?obs)\
            )', '{}:{}'.format(0, end-1)),
            ('(BaxterStationaryBase ?robot)', '{}:{}'.format(0, end-1)),
            # ('(BaxterStationaryBase ?robot)', '{}:{}'.format(approach_time, retreat_time-1)),
            ('(BaxterIsMP ?robot)', '0:{}'.format(end-1)),
            ('(BaxterWithinJointLimit ?robot)', '0:{}'.format(end)),
            ('(forall (?obs - Obstacle)\
                (forall (?obj - Basket)\
                    (not (BaxterCollides ?obj ?obs))\
                )\
            )', '0:{}'.format(end-1)),
            ('(forall (?obs - Obstacle)\
                (not (BaxterRCollides ?robot ?obs))\
            )', '0:{}'.format(end)),
            ('(forall (?obj - Basket)\
                (not (BaxterObstructs ?robot ?sp ?ep ?obj))\
            )', '0:{}'.format(grasp_time-1)),
            ('(forall (?obj - Basket)\
                (not (BaxterObstructsHolding ?robot ?sp ?ep ?obj ?basket))\
            )', '{}:{}'.format(grasp_time, end)),
            ('(forall (?cloth - Cloth) (BaxterObjRelPoseConstant ?basket ?cloth))', '0:{}'.format(end)),
            ('(forall (?ct - ClothTarget)\
                (BaxterClothTargetInBasket ?ct ?target)\
            )', '{}:{}'.format(0, 0)),
        ]
        self.eff = [\
            ('(not (BaxterAt ?basket ?target))', '{}:{}'.format(end, end-1)) ,
            ('(not (BaxterRobotAt ?robot ?sp))', '{}:{}'.format(end, end-1)),
            ('(BaxterRobotAt ?robot ?ep)', '{}:{}'.format(end, end)),
            ('(BaxterBasketInGripper ?robot ?basket)', '{}:{}'.format(end, end)),
            ('(forall (?sym1 - RobotPose)\
                (forall (?sym2 - RobotPose)\
                    (not (BaxterObstructs ?robot ?sym1 ?sym2 ?basket))\
                )\
            )', '{}:{}'.format(end, end-1)),
            ('(forall (?sym1 - Robotpose)\
                (forall (?sym2 - RobotPose)\
                    (forall (?obj - Basket) (not (BaxterObstructsHolding ?robot ?sym1 ?sym2 ?basket ?obj)))\
                )\
            )', '{}:{}'.format(end, end-1)),
        ]

class Putdown(Action):
    def __init__(self):
        self.name = 'basket_putdown'
        self.timesteps = 2 * const.EEREACHABLE_STEPS + 11
        end = self.timesteps - 1
        self.args = '(?robot - Robot ?basket - Basket ?target - BasketTarget ?sp - RobotPose ?ee_left - EEPose ?ee_right - EEPose ?ep - RobotPose)'
        putdown_time = const.EEREACHABLE_STEPS + 5
        approach_time = 5
        retreat_time = end - 5
        self.pre = [\
            ('(BaxterAt ?basket ?target)', '{}:{}'.format(putdown_time, end)),
            ('(BaxterRobotAt ?robot ?sp)', '0:0'),
            ('(BaxterEEReachableLeftVer ?robot ?sp ?ee_left)', '{}:{}'.format(putdown_time, putdown_time)),
            ('(BaxterEEReachableRightVer ?robot ?sp ?ee_right)', '{}:{}'.format(putdown_time, putdown_time)),
            ('(BaxterOpenGrippers ?robot)', '{}:{}'.format(putdown_time+1,  end)),
            ('(BaxterCloseGrippers ?robot)', '{}:{}'.format(0,  putdown_time)),
            # ('(BaxterBasketGraspLeftPos ?ee_left ?target)', '{}:{}'.format(putdown_time, putdown_time)),
            # ('(BaxterBasketGraspLeftRot ?ee_left ?target)', '{}:{}'.format(putdown_time, putdown_time)),
            # ('(BaxterBasketGraspRightPos ?ee_right ?target)', '{}:{}'.format(putdown_time, putdown_time)),
            # ('(BaxterBasketGraspRightRot ?ee_right ?target)', '{}:{}'.format(putdown_time, putdown_time)),
            ('(BaxterBasketGraspValidPos ?ee_left ?ee_right ?target)', '{}:{}'.format(putdown_time, putdown_time)),
            ('(BaxterBasketGraspValidRot ?ee_left ?ee_right ?target)', '{}:{}'.format(putdown_time, putdown_time)),
            ('(BaxterBasketInGripper ?robot ?basket)', '{}:{}'.format(0, putdown_time)),
            ('(forall (?obj - Basket)\
                (not (BaxterBasketInGripper ?robot ?basket))\
            )', '{}:{}'.format(putdown_time+1, end)),
            ('(BaxterBasketLevel ?basket)', '{}:{}'.format(0, end)),
            ('(forall (?obj - Basket) \
                (BaxterStationary ?obj)\
            )', '{}:{}'.format(putdown_time+1, end-1)),
            ('(forall (?obs - Obstacle)\
                (BaxterStationaryW ?obs)\
            )', '{}:{}'.format(0, end-1)),
            ('(forall (?obs - Washer)\
                (BaxterStationaryWasher ?obs)\
            )', '{}:{}'.format(0, end-1)),
            ('(forall (?obs - Washer) (BaxterStationaryWasherDoor ?obs))', '0:{}'.format(end-1)),
            ('(BaxterStationaryBase ?robot)', '{}:{}'.format(0, end-1)),
            # ('(BaxterStationaryBase ?robot)', '{}:{}'.format(approach_time, retreat_time-1)),
            ('(BaxterIsMP ?robot)', '0:{}'.format(end-1)),
            ('(BaxterWithinJointLimit ?robot)', '0:{}'.format(end)),
            ('(forall (?obs - Obstacle)\
                (forall (?obj - Basket)\
                    (not (BaxterCollides ?obj ?obs))\
                )\
            )', '0:{}'.format(end-1)),
            ('(not (BaxterRSelfCollides ?robot))', '0:{}'.format(end)),
            ('(forall (?obs - Obstacle)\
                (not (BaxterRCollides ?robot ?obs))\
            )', '0:{}'.format(end)),
            ('(forall (?obj - Basket)\
                (not (BaxterObstructs ?robot ?sp ?ep ?obj))\
            )', '{}:{}'.format(putdown_time+1, end)),
            ('(forall (?obj - Basket)\
                (not (BaxterObstructsHolding ?robot ?sp ?ep ?obj ?basket))\
            )', '{}:{}'.format(0, putdown_time))
        ]
        self.eff = [\
            ('(BaxterAt ?basket ?target)', '{}:{}'.format(end, end)),
            ('(not (BaxterRobotAt ?robot ?sp))', '{}:{}'.format(end, end-1)),
            ('(BaxterRobotAt ?robot ?ep)', '{}:{}'.format(end, end)),
            ('(not \
                (BaxterBasketInGripper ?robot ?basket))', '{}:{}'.format(end, end-1)),
            ('(forall (?sym1 - RobotPose)\
                (forall (?sym2 - RobotPose)\
                    (not (BaxterObstructs ?robot ?sym1 ?sym2 ?basket))\
                )\
            )', '{}:{}'.format(end, end-1)),
            ('(forall (?sym1 - Robotpose)\
                (forall (?sym2 - RobotPose)\
                    (forall (?obj - Basket) (not (BaxterObstructsHolding ?robot ?sym1 ?sym2 ?basket ?obj)))\
                )\
            )', '{}:{}'.format(end, end-1))
        ]

class PutdownWithCloth(Action):
    def __init__(self):
        self.name = 'basket_putdown_with_cloth'
        self.timesteps = 2 * const.EEREACHABLE_STEPS + 11
        end = self.timesteps - 1
        self.args = '(?robot - Robot ?basket - Basket ?target - BasketTarget ?sp - RobotPose ?ee_left - EEPose ?ee_right - EEPose ?ep - RobotPose)'
        putdown_time = const.EEREACHABLE_STEPS + 5
        approach_time = 5
        retreat_time = end - 5
        self.pre = [\
            ('(BaxterAt ?basket ?target)', '{}:{}'.format(putdown_time, end)),
            ('(BaxterRobotAt ?robot ?sp)', '0:0'),
            ('(BaxterEEReachableLeftVer ?robot ?sp ?ee_left)', '{}:{}'.format(putdown_time, putdown_time)),
            ('(BaxterEEReachableRightVer ?robot ?sp ?ee_right)', '{}:{}'.format(putdown_time, putdown_time)),
            ('(BaxterOpenGrippers ?robot)', '{}:{}'.format(putdown_time+1,  end)),
            ('(BaxterCloseGrippers ?robot)', '{}:{}'.format(0,  putdown_time)),
            # ('(BaxterBasketGraspLeftPos ?ee_left ?target)', '{}:{}'.format(putdown_time, putdown_time)),
            # ('(BaxterBasketGraspLeftRot ?ee_left ?target)', '{}:{}'.format(putdown_time, putdown_time)),
            # ('(BaxterBasketGraspRightPos ?ee_right ?target)', '{}:{}'.format(putdown_time, putdown_time)),
            # ('(BaxterBasketGraspRightRot ?ee_right ?target)', '{}:{}'.format(putdown_time, putdown_time)),
            ('(BaxterBasketGraspValidPos ?ee_left ?ee_right ?target)', '{}:{}'.format(putdown_time, putdown_time)),
            ('(BaxterBasketGraspValidRot ?ee_left ?ee_right ?target)', '{}:{}'.format(putdown_time, putdown_time)),
            ('(BaxterBasketInGripper ?robot ?basket)', '{}:{}'.format(0, putdown_time)),
            ('(forall (?obj - Basket)\
                (not (BaxterBasketInGripper ?robot ?basket))\
            )', '{}:{}'.format(putdown_time+1, end)),
            ('(BaxterBasketLevel ?basket)', '{}:{}'.format(0, end)),
            ('(forall (?obj - Basket) \
                (BaxterStationary ?obj)\
            )', '{}:{}'.format(putdown_time+1, end-1)),
            ('(forall (?obs - Obstacle)\
                (BaxterStationaryW ?obs)\
            )', '{}:{}'.format(0, end-1)),
            ('(forall (?obs - Washer)\
                (BaxterStationaryWasher ?obs)\
            )', '{}:{}'.format(0, end-1)),
            ('(forall (?obs - Washer) (BaxterStationaryWasherDoor ?obs))', '0:{}'.format(end-1)),
            ('(BaxterStationaryBase ?robot)', '{}:{}'.format(0, end-1)),
            # ('(BaxterStationaryBase ?robot)', '{}:{}'.format(approach_time, retreat_time-1)),
            ('(BaxterIsMP ?robot)', '0:{}'.format(end-1)),
            ('(BaxterWithinJointLimit ?robot)', '0:{}'.format(end)),
            ('(forall (?obs - Obstacle)\
                (forall (?obj - Basket)\
                    (not (BaxterCollides ?obj ?obs))\
                )\
            )', '0:{}'.format(end-1)),
            ('(forall (?obs - Obstacle)\
                (not (BaxterRCollides ?robot ?obs))\
            )', '0:{}'.format(end)),
            ('(forall (?obj - Basket)\
                (not (BaxterObstructs ?robot ?sp ?ep ?obj))\
            )', '{}:{}'.format(putdown_time+1, end)),
            ('(forall (?obj - Basket)\
                (not (BaxterObstructsHolding ?robot ?sp ?ep ?obj ?basket))\
            )', '{}:{}'.format(0, putdown_time)),
            ('(forall (?cloth - Cloth) (BaxterObjRelPoseConstant ?basket ?cloth))', '0:{}'.format(end)),
        ]
        self.eff = [\
            ('(BaxterAt ?basket ?target)', '{}:{}'.format(end, end)),
            ('(not (BaxterRobotAt ?robot ?sp))', '{}:{}'.format(end, end-1)),
            ('(BaxterRobotAt ?robot ?ep)', '{}:{}'.format(end, end)),
            ('(not \
                (BaxterBasketInGripper ?robot ?basket))', '{}:{}'.format(end, end-1)),
            ('(forall (?sym1 - RobotPose)\
                (forall (?sym2 - RobotPose)\
                    (not (BaxterObstructs ?robot ?sym1 ?sym2 ?basket))\
                )\
            )', '{}:{}'.format(end, end-1)),
            ('(forall (?sym1 - Robotpose)\
                (forall (?sym2 - RobotPose)\
                    (forall (?obj - Basket) (not (BaxterObstructsHolding ?robot ?sym1 ?sym2 ?basket ?obj)))\
                )\
            )', '{}:{}'.format(end, end-1)),
            ('(forall (?ct - ClothTarget) (BaxterClothTargetInBasket ?ct ?target))', '{}:{}'.format(end, end)),
        ]

class OpenDoor(Action):
    def __init__(self):
        self.name = 'open_door'
        self.timesteps = 2*(const.EEREACHABLE_STEPS+6) + 5 # 25
        end = self.timesteps - 1
        self.args = '(?robot - Robot ?washer - Washer ?sp - RobotPose ?ee_approach - EEPose ?ee_retreat - EEPose ?ep - RobotPose ?wsp - WasherPose ?wep - WasherPose)'
        grasp_time = const.EEREACHABLE_STEPS + 5
        retreat_time = end - const.EEREACHABLE_STEPS - 5
        self.pre = [\
            ('(BaxterRobotAt ?robot ?sp)', '0:0'),
            ('(BaxterWasherAt ?washer ?wsp)', '0:{}'.format(grasp_time)),
            ('(BaxterWasherAt ?washer ?wep)', '{}:{}'.format(retreat_time, end)),
            ('(BaxterEEApproachLeft ?robot ?sp ?ee_approach)', '{}:{}'.format(grasp_time, grasp_time)),
            ('(BaxterEEClosedDoorGraspValid ?ee_approach ?washer)', '{}:{}'.format(grasp_time, grasp_time)),
            ('(BaxterEEOpenedDoorGraspValid ?ee_retreat ?washer)', '{}:{}'.format(retreat_time, retreat_time)),
            ('(BaxterOpenGripperLeft ?robot)', '{}:{}'.format(0,  grasp_time-1)),
            ('(BaxterCloseGripperLeft ?robot)', '{}:{}'.format(grasp_time,  retreat_time)),
            ('(BaxterOpenGripperLeft ?robot)', '{}:{}'.format(retreat_time+1,  end)),
            ('(BaxterEERetreatLeft ?robot ?ep ?ee_retreat)', '{}:{}'.format(retreat_time, retreat_time)),
            ('(BaxterWasherInGripper ?robot ?washer)', '{}:{}'.format(grasp_time, retreat_time)),
            ('(BaxterStationaryWasher ?washer)', '0:{}'.format(end-1)),
            ('(forall (?obj - Basket) \
                (BaxterStationary ?obj)\
            )', '0:{}'.format(end-1)),
            ('(forall (?obj - Cloth) \
                (BaxterStationaryCloth ?obj)\
            )', '0:{}'.format(end-1)),
            ('(forall (?obs - Obstacle)\
                (BaxterStationaryW ?obs)\
            )', '{}:{}'.format(0, end-1)),
            # ('(BaxterStationaryBase ?robot)', '{}:{}'.format(0, grasp_time-1)),
            ('(BaxterStationaryBase ?robot)', '{}:{}'.format(0, end-1)),
            ('(BaxterIsMP ?robot)', '0:{}'.format(end-1)),
            # ('(BaxterWasherIsMP ?washer)', '0:{}'.format(end-1)),
            ('(BaxterWithinJointLimit ?robot)', '0:{}'.format(end)),
            ('(BaxterWasherWithinJointLimit ?washer)', '0:{}'.format(end)),
            ('(not (BaxterCollidesWasher ?robot ?washer))', '{}:{}'.format(0, end)),
            ('(forall (?obs - Obstacle)\
                (forall (?obj - Basket)\
                    (not (BaxterCollides ?obj ?obs))\
                )\
            )', '0:{}'.format(end-1)),
            ('(forall (?obs - Obstacle)\
                (not (BaxterRCollides ?robot ?obs))\
            )', '0:{}'.format(end)),
            ('(not (BaxterRSelfCollides ?robot))', '0:{}'.format(end)),
            ('(forall (?obj - Basket)\
                (not (BaxterObstructs ?robot ?sp ?ep ?obj))\
            )', '0:{}'.format(grasp_time-1))
        ]
        self.eff = [\
            ('(not (BaxterRobotAt ?robot ?sp))', '{}:{}'.format(end, end-1)),
            ('(not (BaxterWasherAt ?washer ?wsp))', '{}:{}'.format(end, end-1)),
            ('(BaxterRobotAt ?robot ?ep)', '{}:{}'.format(end, end)),
            ('(BaxterWasherAt ?washer ?wep)', '{}:{}'.format(end, end)),
            ('(forall (?sym1 - RobotPose)\
                (forall (?sym2 - RobotPose)\
                (forall (?obj - Basket)\
                    (not (BaxterObstructs ?robot ?sym1 ?sym2 ?obj)))\
                )\
            )', '{}:{}'.format(end, end-1))
        ]

class PushDoorOpen(Action):
    def __init__(self):
        self.name = 'push_door_open'
        self.timesteps = 35
        end = self.timesteps - 1
        self.args = '(?robot - Robot ?washer - Washer ?sp - RobotPose ?ep - RobotPose ?wsp - WasherPose ?wep - WasherPose)'
        push_time = 5
        retreat_time = 25
        self.pre = [\
            ('(BaxterRobotAt ?robot ?sp)', '0:0'),
            ('(BaxterWasherAt ?washer ?wsp)', '0:{}'.format(push_time)),
            ('(BaxterPushInsideWasher ?robot ?washer)', '{}:{}'.format(push_time, push_time)),
            ('(BaxterWasherAt ?washer ?wep)', '{}:{}'.format(retreat_time, end)),
            ('(BaxterPushInsideWasher ?robot ?washer)', '{}:{}'.format(retreat_time, retreat_time)),
            ('(BaxterStationaryWasher ?washer)', '0:{}'.format(end-1)),
            ('(forall (?obj - Basket) \
                (BaxterStationary ?obj)\
            )', '0:{}'.format(end-1)),
            ('(forall (?obj - Cloth) \
                (BaxterStationaryCloth ?obj)\
            )', '0:{}'.format(end-1)),
            ('(forall (?obs - Obstacle)\
                (BaxterStationaryW ?obs)\
            )', '{}:{}'.format(0, end-1)),
            ('(BaxterStationaryBase ?robot)', '{}:{}'.format(0, end-1)),
            ('(BaxterIsMP ?robot)', '0:{}'.format(end-1)),
            # ('(BaxterWasherIsMP ?washer)', '0:{}'.format(end-1)),
            ('(BaxterWithinJointLimit ?robot)', '0:{}'.format(end)),
            ('(not (BaxterCollidesWasher ?robot ?washer))', '{}:{}'.format(0, end)),
            ('(BaxterWasherWithinJointLimit ?washer)', '0:{}'.format(end)),
            ('(forall (?obs - Obstacle)\
                (forall (?obj - Basket)\
                    (not (BaxterCollides ?obj ?obs))\
                )\
            )', '0:{}'.format(end-1)),
            ('(not (BaxterRSelfCollides ?robot))', '0:{}'.format(end)),
            ('(forall (?obs - Obstacle)\
                (not (BaxterRCollides ?robot ?obs))\
            )', '0:{}'.format(end)),
            ('(forall (?obj - Basket)\
                (not (BaxterObstructs ?robot ?sp ?ep ?obj))\
            )', '0:{}'.format(push_time-1))
        ]
        self.eff = [\
            ('(not (BaxterRobotAt ?robot ?sp))', '{}:{}'.format(end, end-1)),
            ('(not (BaxterWasherAt ?washer ?wsp))', '{}:{}'.format(end, end-1)),
            ('(BaxterRobotAt ?robot ?ep)', '{}:{}'.format(end, end)),
            ('(BaxterWasherAt ?washer ?wep)', '{}:{}'.format(end, end)),
            ('(forall (?sym1 - RobotPose)\
                (forall (?sym2 - RobotPose)\
                (forall (?obj - Basket)\
                    (not (BaxterObstructs ?robot ?sym1 ?sym2 ?obj)))\
                )\
            )', '{}:{}'.format(end, end-1))
        ]


class PushDoorClose(Action):
    def __init__(self):
        self.name = 'push_door_close'
        self.timesteps = 35
        end = self.timesteps - 1
        self.args = '(?robot - Robot ?washer - Washer ?sp - RobotPose ?ep - RobotPose ?wsp - WasherPose ?wep - WasherPose)'
        push_time = 5
        retreat_time = 25
        self.pre = [\
            ('(BaxterRobotAt ?robot ?sp)', '0:0'),
            ('(BaxterWasherAt ?washer ?wsp)', '0:{}'.format(push_time)),
            ('(BaxterPushOutsideWasher ?robot ?washer)', '{}:{}'.format(push_time, push_time)),
            ('(BaxterWasherAt ?washer ?wep)', '{}:{}'.format(retreat_time, end)),
            ('(BaxterPushOutsideCloseWasher ?robot ?washer)', '{}:{}'.format(retreat_time, retreat_time)),
            ('(BaxterStationaryWasher ?washer)', '0:{}'.format(end-1)),
            ('(forall (?obj - Basket) \
                (BaxterStationary ?obj)\
            )', '0:{}'.format(end-1)),
            ('(forall (?obj - Cloth) \
                (BaxterStationaryCloth ?obj)\
            )', '0:{}'.format(end-1)),
            ('(forall (?obs - Obstacle)\
                (BaxterStationaryW ?obs)\
            )', '{}:{}'.format(0, end-1)),
            ('(BaxterStationaryBase ?robot)', '{}:{}'.format(0, end-1)),
            ('(BaxterIsMP ?robot)', '0:{}'.format(end-1)),
            # ('(BaxterWasherIsMP ?washer)', '0:{}'.format(end-1)),
            ('(BaxterWithinJointLimit ?robot)', '0:{}'.format(end)),
            ('(not (BaxterCollidesWasher ?robot ?washer))', '{}:{}'.format(0, end)),
            ('(BaxterWasherWithinJointLimit ?washer)', '0:{}'.format(end)),
            ('(forall (?obs - Obstacle)\
                (forall (?obj - Basket)\
                    (not (BaxterCollides ?obj ?obs))\
                )\
            )', '0:{}'.format(end-1)),
            ('(not (BaxterRSelfCollides ?robot))', '0:{}'.format(end)),
            ('(forall (?obs - Obstacle)\
                (not (BaxterRCollides ?robot ?obs))\
            )', '0:{}'.format(end)),
            ('(forall (?obj - Basket)\
                (not (BaxterObstructs ?robot ?sp ?ep ?obj))\
            )', '0:{}'.format(push_time-1))
        ]
        self.eff = [\
            ('(not (BaxterRobotAt ?robot ?sp))', '{}:{}'.format(end, end-1)),
            ('(not (BaxterWasherAt ?washer ?wsp))', '{}:{}'.format(end, end-1)),
            ('(BaxterRobotAt ?robot ?ep)', '{}:{}'.format(end, end)),
            ('(BaxterWasherAt ?washer ?wep)', '{}:{}'.format(end, end)),
            ('(forall (?sym1 - RobotPose)\
                (forall (?sym2 - RobotPose)\
                (forall (?obj - Basket)\
                    (not (BaxterObstructs ?robot ?sym1 ?sym2 ?obj)))\
                )\
            )', '{}:{}'.format(end, end-1))
        ]

class CloseDoor(Action):
    def __init__(self):
        self.name = 'close_door'
        self.timesteps = 2*(const.EEREACHABLE_STEPS+6) + 5 # 25
        end = self.timesteps - 1
        self.args = '(?robot - Robot ?washer - Washer ?sp - RobotPose ?ee_approach - EEPose ?ee_retreat - EEPose ?ep - RobotPose ?wsp - WasherPose ?wep - WasherPose)'
        grasp_time = const.EEREACHABLE_STEPS + 5
        retreat_time = end - const.EEREACHABLE_STEPS - 5
        self.pre = [\
            ('(BaxterRobotAt ?robot ?sp)', '0:0'),
            ('(BaxterWasherAt ?washer ?wsp)', '0:{}'.format(grasp_time)),
            ('(BaxterWasherAt ?washer ?wep)', '{}:{}'.format(retreat_time, end)),
            ('(BaxterEEApproachLeft ?robot ?sp ?ee_approach)', '{}:{}'.format(grasp_time, grasp_time)),
            ('(BaxterEEOpenedDoorGraspValid ?ee_approach ?washer)', '{}:{}'.format(grasp_time, grasp_time)),
            ('(BaxterEEClosedDoorGraspValid ?ee_retreat ?washer)', '{}:{}'.format(retreat_time, retreat_time)),
            ('(BaxterOpenGripperLeft ?robot)', '{}:{}'.format(0,  grasp_time-1)),
            ('(BaxterCloseGripperLeft ?robot)', '{}:{}'.format(grasp_time,  retreat_time)),
            ('(BaxterOpenGripperLeft ?robot)', '{}:{}'.format(retreat_time+1,  end)),
            ('(BaxterEERetreatLeft ?robot ?ep ?ee_retreat)', '{}:{}'.format(retreat_time, retreat_time)),
            ('(BaxterWasherInGripper ?robot ?washer)', '{}:{}'.format(grasp_time, retreat_time)),
            ('(BaxterStationaryWasher ?washer)', '0:{}'.format(end-1)),
            ('(forall (?obj - Basket) \
                (BaxterStationary ?obj)\
            )', '0:{}'.format(end-1)),
            ('(forall (?obj - Cloth) \
                (BaxterStationaryCloth ?obj)\
            )', '0:{}'.format(end-1)),
            ('(forall (?obs - Obstacle)\
                (BaxterStationaryW ?obs)\
            )', '{}:{}'.format(0, end-1)),
            # ('(BaxterStationaryBase ?robot)', '{}:{}'.format(0, grasp_time-1)),
            ('(BaxterStationaryBase ?robot)', '{}:{}'.format(0, end-1)),
            ('(BaxterIsMP ?robot)', '0:{}'.format(end-1)),
            # ('(BaxterWasherIsMP ?washer)', '0:{}'.format(end-1)),
            ('(BaxterWithinJointLimit ?robot)', '0:{}'.format(end)),
            ('(BaxterWasherWithinJointLimit ?washer)', '0:{}'.format(end)),
            ('(forall (?obs - Obstacle)\
                (forall (?obj - Basket)\
                    (not (BaxterCollides ?obj ?obs))\
                )\
            )', '0:{}'.format(end-1)),
            ('(not (BaxterRSelfCollides ?robot))', '0:{}'.format(end)),
            ('(forall (?obs - Obstacle)\
                (not (BaxterRCollides ?robot ?obs))\
            )', '0:{}'.format(end)),
            ('(forall (?obj - Basket)\
                (not (BaxterObstructs ?robot ?sp ?ep ?obj))\
            )', '0:{}'.format(grasp_time-1)),
            ('(not (BaxterCollidesWasher ?robot ?washer))', '{}:{}'.format(0, end))
        ]
        self.eff = [\
            ('(not (BaxterRobotAt ?robot ?sp))', '{}:{}'.format(end, end-1)),
            ('(not (BaxterWasherAt ?washer ?wsp))', '{}:{}'.format(end, end-1)),
            ('(BaxterRobotAt ?robot ?ep)', '{}:{}'.format(end, end)),
            ('(BaxterWasherAt ?washer ?wep)', '{}:{}'.format(end, end)),
            ('(forall (?sym1 - RobotPose)\
                (forall (?sym2 - RobotPose)\
                (forall (?obj - Basket)\
                    (not (BaxterObstructs ?robot ?sym1 ?sym2 ?obj)))\
                )\
            )', '{}:{}'.format(end, end-1))
        ]

class ClothGrasp(Action):
    def __init__(self):
        self.name = 'cloth_grasp'
        self.timesteps = 2 * const.EEREACHABLE_STEPS + 11
        end = self.timesteps - 1
        self.args = '(?robot - Robot ?cloth - Cloth ?target - ClothTarget ?sp - RobotPose ?ee_left - EEPose ?ep - RobotPose)'
        grasp_time = const.EEREACHABLE_STEPS+5
        approach_time = 5
        retreat_time = end-5
        self.pre = [\
            ('(BaxterClothAt ?cloth ?target)', '0:0'),
            ('(BaxterRobotAt ?robot ?sp)', '0:0'),
            ('(BaxterEEReachableLeftVer ?robot ?sp ?ee_left)', '{}:{}'.format(grasp_time, grasp_time)),
            ('(BaxterClothInGripperLeft ?robot ?cloth)', '{}:{}'.format(grasp_time, end)),
            ('(BaxterClothGraspValid ?ee_left ?target)', '{}:{}'.format(grasp_time, grasp_time)),
            ('(BaxterOpenGripperLeft ?robot)', '{}:{}'.format(0,  grasp_time-1)),
            ('(BaxterCloseGripperLeft ?robot)', '{}:{}'.format(grasp_time,  end)),
            ('(BaxterStationaryCloth ?cloth)', '{}:{}'.format(0, grasp_time-1)),
            ('(forall (?obj - Basket) \
                (BaxterStationary ?obj)\
            )', '0:{}'.format(end-1)),
            ('(forall (?obs - Washer)\
                (BaxterStationaryWasher ?obs)\
            )', '{}:{}'.format(0, end-1)),
            ('(forall (?obs - Washer) (BaxterStationaryWasherDoor ?obs))', '0:{}'.format(end-1)),
            ('(forall (?obs - Obstacle)\
                (BaxterStationaryW ?obs)\
            )', '{}:{}'.format(0, end-1)),
            ('(BaxterStationaryBase ?robot)', '{}:{}'.format(0, end-1)),
            ('(BaxterIsMP ?robot)', '0:{}'.format(end-1)),
            ('(BaxterWithinJointLimit ?robot)', '0:{}'.format(end)),
            ('(forall (?obs - Obstacle)\
                (forall (?obj - Basket)\
                    (not (BaxterCollides ?obj ?obs))\
                )\
            )', '0:{}'.format(end-1)),
            ('(not (BaxterRSelfCollides ?robot))', '0:{}'.format(end)),
            ('(forall (?obs - Obstacle)\
                (not (BaxterRCollides ?robot ?obs))\
            )', '0:{}'.format(end)),
            ('(forall (?obj - Basket)\
                (not (BaxterObstructs ?robot ?sp ?ep ?obj))\
            )', '0:{}'.format(end))
        ]
        self.eff = [\
            ('(not (BaxterClothAt ?cloth ?target))', '{}:{}'.format(end, end-1)) ,
            ('(not (BaxterRobotAt ?robot ?sp))', '{}:{}'.format(end, end-1)),
            ('(BaxterRobotAt ?robot ?ep)', '{}:{}'.format(end, end)),
            ('(BaxterClothInGripperLeft ?robot ?cloth)', '{}:{}'.format(end, end)),
            ('(forall (?sym1 - Robotpose)\
                (forall (?sym2 - RobotPose)\
                    (forall (?obj - Basket) (not (BaxterObstructsHoldingCloth ?robot ?sym1 ?sym2 ?obj ?cloth)))\
                )\
            )', '{}:{}'.format(end, end-1))
        ]

class BothEndClothGrasp(Action):
    def __init__(self):
        self.name = 'both_end_cloth_grasp'
        self.timesteps = 2 * const.EEREACHABLE_STEPS + 11
        end = self.timesteps - 1
        self.args = '(?robot - Robot ?cloth - Can ?target - ClothTarget ?sp - RobotPose ?ee_left - EEPose ?ee_right - EEPose ?ep - RobotPose)'
        grasp_time = const.EEREACHABLE_STEPS+5
        approach_time = 5
        retreat_time = end-5
        self.pre = [\
            ('(BaxterEdgeAt ?cloth ?target)', '0:0'),
            ('(BaxterRobotAt ?robot ?sp)', '0:0'),
            ('(BaxterEEReachableLeftVer ?robot ?sp ?ee_left)', '{}:{}'.format(grasp_time, grasp_time)),
            ('(BaxterEEReachableRightVer ?robot ?sp ?ee_right)', '{}:{}'.format(grasp_time, grasp_time)),
            ('(BaxterBothEndsInGripper ?robot ?cloth)', '{}:{}'.format(grasp_time, end)),
            ('(BaxterClothBothGraspValidLeft ?ee_left ?target ?cloth)', '{}:{}'.format(grasp_time, grasp_time)),
            ('(BaxterClothBothGraspValidRight ?ee_right ?target ?cloth)', '{}:{}'.format(grasp_time, grasp_time)),
            ('(BaxterOpenGripperLeft ?robot)', '{}:{}'.format(1,  grasp_time-1)),
            ('(BaxterCloseGripperLeft ?robot)', '{}:{}'.format(grasp_time, end)),
            ('(BaxterOpenGripperRight ?robot)', '{}:{}'.format(1,  grasp_time-1)),
            ('(BaxterCloseGripperRight ?robot)', '{}:{}'.format(grasp_time, end)),
            ('(BaxterStationaryEdge ?cloth)', '{}:{}'.format(0, grasp_time-1)),
            ('(forall (?obj - Basket) \
                (BaxterStationary ?obj)\
            )', '0:{}'.format(end-1)),
            ('(forall (?obs - Washer)\
                (BaxterStationaryWasher ?obs)\
            )', '{}:{}'.format(0, end-1)),
            ('(forall (?obs - Washer) (BaxterStationaryWasherDoor ?obs))', '0:{}'.format(end-1)),
            ('(forall (?obs - Obstacle)\
                (BaxterStationaryW ?obs)\
            )', '{}:{}'.format(0, end-1)),
            ('(BaxterStationaryBase ?robot)', '{}:{}'.format(0, end-1)),
            ('(BaxterIsMP ?robot)', '0:{}'.format(end-1)),
            ('(BaxterWithinJointLimit ?robot)', '0:{}'.format(end)),
            ('(forall (?obs - Obstacle)\
                (forall (?obj - Basket)\
                    (not (BaxterCollides ?obj ?obs))\
                )\
            )', '0:{}'.format(end-1)),
            ('(not (BaxterRSelfCollides ?robot))', '1:{}'.format(end-1)),
            ('(forall (?obs - Obstacle)\
                (not (BaxterRCollides ?robot ?obs))\
            )', '0:{}'.format(end)),
            ('(forall (?obj - Basket)\
                (not (BaxterObstructs ?robot ?sp ?ep ?obj))\
            )', '0:{}'.format(end))
        ]
        self.eff = [\
            ('(not (BaxterRobotAt ?robot ?sp))', '{}:{}'.format(end, end-1)),
            ('(BaxterRobotAt ?robot ?ep)', '{}:{}'.format(end, end)),
        ]

class ClothGraspFromHandle(Action):
    def __init__(self):
        self.name = 'cloth_grasp_from_handle'
        self.timesteps = 2 * const.EEREACHABLE_STEPS + 11
        end = self.timesteps - 1
        self.args = '(?robot - Robot ?cloth - Cloth ?basket - Basket ?bt - BasketTarget ?sp - RobotPose ?ee_left - EEPose ?ee_right - EEPose ?ep - RobotPose)'
        grasp_time = const.EEREACHABLE_STEPS+5
        approach_time = 5
        retreat_time = end-5
        self.pre = [\
            ('(BaxterRobotAt ?robot ?sp)', '0:0'),
            ('(BaxterEEReachableLeftVer ?robot ?sp ?ee_left)', '{}:{}'.format(grasp_time, grasp_time)),
            ('(BaxterEEReachableRightVer ?robot ?sp ?ee_right)', '{}:{}'.format(grasp_time, grasp_time)),
            ('(BaxterBasketGraspValidShallowPos ?ee_left ?ee_right ?bt)', '{}:{}'.format(grasp_time, grasp_time)),
            ('(BaxterBasketGraspValidRot ?ee_left ?ee_right ?bt)', '{}:{}'.format(grasp_time, grasp_time)),
            ('(BaxterOpenGripperLeft ?robot)', '{}:{}'.format(1,  grasp_time-1)),
            ('(BaxterOpenGripperRight ?robot)', '{}:{}'.format(1,  grasp_time-1)),
            ('(BaxterOpenGripperRight ?robot)', '{}:{}'.format(grasp_time+1,  end-1)),
            ('(BaxterCloseGripperLeft ?robot)', '{}:{}'.format(grasp_time,  end)),
            ('(forall (?obj - Basket) \
                (BaxterStationary ?obj)\
            )', '0:{}'.format(end-1)),
            ('(forall (?obs - Washer)\
                (BaxterStationaryWasher ?obs)\
            )', '{}:{}'.format(0, end-1)),
            ('(forall (?obs - Washer) (BaxterStationaryWasherDoor ?obs))', '0:{}'.format(end-1)),
            ('(forall (?obs - Obstacle)\
                (BaxterStationaryW ?obs)\
            )', '{}:{}'.format(0, end-1)),
            ('(BaxterStationaryBase ?robot)', '{}:{}'.format(0, end-1)),
            ('(BaxterIsMP ?robot)', '0:{}'.format(end-1)),
            ('(BaxterWithinJointLimit ?robot)', '0:{}'.format(end)),
            ('(forall (?obs - Obstacle)\
                (forall (?obj - Basket)\
                    (not (BaxterCollides ?obj ?obs))\
                )\
            )', '0:{}'.format(end-1)),
            ('(not (BaxterRSelfCollides ?robot))', '1:{}'.format(end-1)),
            ('(forall (?obs - Obstacle)\
                (not (BaxterRCollides ?robot ?obs))\
            )', '0:{}'.format(end)),
            ('(forall (?obj - Basket)\
                (not (BaxterObstructs ?robot ?sp ?ep ?obj))\
            )', '0:{}'.format(end))
        ]
        self.eff = [\
            ('(not (BaxterRobotAt ?robot ?sp))', '{}:{}'.format(end, end-1)),
            ('(BaxterRobotAt ?robot ?ep)', '{}:{}'.format(end, end)),
            ('(BaxterClothInGripperLeft ?robot ?cloth)', '{}:{}'.format(end, end)),
            ('(forall (?sym1 - Robotpose)\
                (forall (?sym2 - RobotPose)\
                    (forall (?obj - Basket) (not (BaxterObstructsHoldingCloth ?robot ?sym1 ?sym2 ?obj ?cloth)))\
                )\
            )', '{}:{}'.format(end, end-1))
        ]

class ClothGraspRight(Action):
    def __init__(self):
        self.name = 'cloth_grasp'
        self.timesteps = 2 * const.EEREACHABLE_STEPS + 11
        end = self.timesteps - 1
        self.args = '(?robot - Robot ?cloth - Cloth ?target - ClothTarget ?sp - RobotPose ?ee_right - EEPose ?ep - RobotPose)'
        grasp_time = const.EEREACHABLE_STEPS+5
        approach_time = 5
        retreat_time = end-5
        self.pre = [\
            ('(BaxterClothAt ?cloth ?target)', '0:0'),
            ('(BaxterRobotAt ?robot ?sp)', '0:0'),
            ('(BaxterEEReachableRightVer ?robot ?sp ?ee_right)', '{}:{}'.format(grasp_time, grasp_time)),
            ('(BaxterClothInGripperRight ?robot ?cloth)', '{}:{}'.format(grasp_time, end)),
            ('(BaxterClothGraspValid ?ee_right ?target)', '{}:{}'.format(grasp_time, grasp_time)),
            ('(BaxterOpenGripperRight ?robot)', '{}:{}'.format(0,  grasp_time-1)),
            ('(BaxterCloseGripperRight ?robot)', '{}:{}'.format(grasp_time,  end)),
            ('(BaxterStationaryCloth ?cloth)', '{}:{}'.format(0, grasp_time-1)),
            ('(forall (?obj - Basket) \
                (BaxterStationary ?obj)\
            )', '0:{}'.format(end-1)),
            ('(forall (?obs - Washer)\
                (BaxterStationaryWasher ?obs)\
            )', '{}:{}'.format(0, end-1)),
            ('(forall (?obs - Washer) (BaxterStationaryWasherDoor ?obs))', '0:{}'.format(end-1)),
            ('(forall (?obs - Obstacle)\
                (BaxterStationaryW ?obs)\
            )', '{}:{}'.format(0, end-1)),
            ('(BaxterStationaryBase ?robot)', '{}:{}'.format(0, end-1)),
            ('(BaxterIsMP ?robot)', '0:{}'.format(end-1)),
            ('(BaxterWithinJointLimit ?robot)', '0:{}'.format(end)),
            ('(forall (?obs - Obstacle)\
                (forall (?obj - Basket)\
                    (not (BaxterCollides ?obj ?obs))\
                )\
            )', '0:{}'.format(end-1)),
            # ('(not (BaxterRSelfCollides ?robot))', '0:{}'.format(end)),
            ('(forall (?obs - Obstacle)\
                (not (BaxterRCollides ?robot ?obs))\
            )', '0:{}'.format(end)),
            ('(forall (?obj - Basket)\
                (not (BaxterObstructs ?robot ?sp ?ep ?obj))\
            )', '0:{}'.format(end))
        ]
        self.eff = [\
            ('(not (BaxterClothAt ?cloth ?target))', '{}:{}'.format(end, end-1)) ,
            ('(not (BaxterRobotAt ?robot ?sp))', '{}:{}'.format(end, end-1)),
            ('(BaxterRobotAt ?robot ?ep)', '{}:{}'.format(end, end)),
            ('(BaxterClothInGripperRight ?robot ?cloth)', '{}:{}'.format(end, end)),
            ('(forall (?sym1 - Robotpose)\
                (forall (?sym2 - RobotPose)\
                    (forall (?obj - Basket) (not (BaxterObstructsHoldingCloth ?robot ?sym1 ?sym2 ?obj ?cloth)))\
                )\
            )', '{}:{}'.format(end, end-1))
        ]

class ClothPutdown(Action):
    def __init__(self):
        self.name = 'cloth_putdown'
        self.timesteps = 2 * const.EEREACHABLE_STEPS + 11
        end = self.timesteps - 1
        self.args = '(?robot - Robot ?cloth - Cloth ?target - ClothTarget ?sp - RobotPose ?ee_left - EEPose ?ep - RobotPose)'
        putdown_time = const.EEREACHABLE_STEPS+5
        approach_time = 5
        retreat_time = end-5
        self.pre = [\
            ('(BaxterRobotAt ?robot ?sp)', '0:0'),
            ('(BaxterEEReachableLeftVer ?robot ?sp ?ee_left)', '{}:{}'.format(putdown_time, putdown_time)),
            ('(BaxterClothInGripperLeft ?robot ?cloth)', '{}:{}'.format(0, putdown_time)),
            ('(BaxterClothGraspValid ?ee_left ?target)', '{}:{}'.format(putdown_time, putdown_time)),
            ('(BaxterOpenGripperLeft ?robot)', '{}:{}'.format(putdown_time,  end)),
            ('(BaxterCloseGripperLeft ?robot)', '{}:{}'.format(0,  putdown_time-1)),
            ('(BaxterStationaryCloth ?cloth)', '{}:{}'.format(putdown_time, end-1)),
            ('(forall (?obj - Basket) \
                (BaxterStationary ?obj)\
            )', '0:{}'.format(end-1)),
            ('(forall (?obs - Washer)\
                (BaxterStationaryWasher ?obs)\
            )', '{}:{}'.format(0, end-1)),
            ('(forall (?obs - Washer) (BaxterStationaryWasherDoor ?obs))', '0:{}'.format(end-1)),
            ('(forall (?obs - Obstacle)\
                (BaxterStationaryW ?obs)\
            )', '{}:{}'.format(0, end-1)),
            ('(BaxterStationaryBase ?robot)', '{}:{}'.format(0, end-1)),
            ('(BaxterIsMP ?robot)', '0:{}'.format(end-1)),
            ('(BaxterWithinJointLimit ?robot)', '0:{}'.format(end)),
            ('(forall (?obs - Obstacle)\
                (forall (?obj - Basket)\
                    (not (BaxterCollides ?obj ?obs))\
                )\
            )', '0:{}'.format(end-1)),
            ('(not (BaxterRSelfCollides ?robot))', '1:{}'.format(end-1)),
            ('(forall (?obj - Washer)\
                (not (BaxterCollidesWasher ?robot ?obj)))', '{}:{}'.format(0, end-1)),
            ('(forall (?obs - Obstacle)\
                (not (BaxterRCollides ?robot ?obs))\
            )', '0:{}'.format(end)),
            ('(forall (?obj - Basket)\
                (not (BaxterObstructs ?robot ?sp ?ep ?obj))\
            )', '{}:{}'.format(0, end))
        ]
        self.eff = [\
            ('(BaxterClothAt ?cloth ?target)', '{}:{}'.format(end, end-1)),
            ('(not (BaxterRobotAt ?robot ?sp))', '{}:{}'.format(end, end-1)),
            ('(BaxterRobotAt ?robot ?ep)', '{}:{}'.format(end, end)),
            ('(not (BaxterClothInGripperLeft ?robot ?cloth))', '{}:{}'.format(end, end)),
            ('(forall (?sym1 - RobotPose)\
                (forall (?sym2 - RobotPose)\
                    (not (BaxterObstructsCloth ?robot ?sym1 ?sym2 ?cloth))\
                )\
            )', '{}:{}'.format(end, end-1))
        ]

# class PutIntoBasket(Action):
#     def __init__(self):
#         self.name = 'cloth_putdown'
#         self.timesteps = 2 * const.EEREACHABLE_STEPS + 11
#         end = self.timesteps - 1
#         self.args = '(?robot - Robot ?cloth - Cloth ?basket - Basket ?cloth_target - ClothTarget ?basket_target - BasketTarget ?sp - RobotPose ?ee_left - EEPose ?ep - RobotPose)'
#         putdown_time = const.EEREACHABLE_STEPS+5
#         approach_time = 5
#         retreat_time = end-5
#         self.pre = [\
#             ('(BaxterRobotAt ?robot ?sp)', '0:0'),
#             ('(BaxterEEReachableLeftVer ?robot ?sp ?ee_left)', '{}:{}'.format(putdown_time, putdown_time)),
#             ('(BaxterClothInGripperLeft ?robot ?cloth)', '{}:{}'.format(0, putdown_time)),
#             ('(BaxterClothGraspValid ?ee_left ?target)', '{}:{}'.format(putdown_time, putdown_time)),
#             ('(BaxterOpenGripperLeft ?robot)', '{}:{}'.format(putdown_time,  end)),
#             ('(BaxterCloseGripperLeft ?robot)', '{}:{}'.format(0,  putdown_time-1)),
#             ('(BaxterStationaryCloth ?cloth)', '{}:{}'.format(putdown_time, end-1)),
#             ('(forall (?obj - Basket) \
#                 (BaxterStationary ?obj)\
#             )', '0:{}'.format(end-1)),
#             ('(forall (?obs - Washer)\
#                 (BaxterStationaryWasher ?obs)\
#             )', '{}:{}'.format(0, end-1)),
#             ('(forall (?obs - Washer) (BaxterStationaryWasherDoor ?obs))', '0:{}'.format(end-1)),
#             ('(forall (?obs - Obstacle)\
#                 (BaxterStationaryW ?obs)\
#             )', '{}:{}'.format(0, end-1)),
#             ('(BaxterStationaryBase ?robot)', '{}:{}'.format(0, end-1)),
#             ('(BaxterIsMP ?robot)', '0:{}'.format(end-1)),
#             ('(BaxterWithinJointLimit ?robot)', '0:{}'.format(end)),
#             ('(forall (?obs - Obstacle)\
#                 (forall (?obj - Basket)\
#                     (not (BaxterCollides ?obj ?obs))\
#                 )\
#             )', '0:{}'.format(end-1)),
#             ('(not (BaxterRSelfCollides ?robot))', '0:{}'.format(end)),
#             ('(forall (?obs - Obstacle)\
#                 (not (BaxterRCollides ?robot ?obs))\
#             )', '0:{}'.format(end)),
#             ('(forall (?obj - Basket)\
#                 (not (BaxterObstructs ?robot ?sp ?ep ?obj))\
#             )', '{}:{}'.format(0, end))
#         ]
#         self.eff = [\
#             ('(BaxterClothAt ?cloth ?cloth_target)', '{}:{}'.format(end, end)),
#             ('(BaxterAt ?basket ?basket_target)', '{}:{}'.format(end, end)),
#             ('(not (BaxterRobotAt ?robot ?sp))', '{}:{}'.format(end, end-1)),
#             ('(BaxterRobotAt ?robot ?ep)', '{}:{}'.format(end, end)),
#             ('(BaxterClothTargetInBasket ?cloth_target ?basket_target)', '{}:{}'.format(end, end))
#             ('(not (BaxterClothInGripperLeft ?robot ?cloth))', '{}:{}'.format(end, end)),
#             ('(forall (?sym1 - RobotPose)\
#                 (forall (?sym2 - RobotPose)\
#                     (not (BaxterObstructsCloth ?robot ?sym1 ?sym2 ?cloth))\
#                 )\
#             )', '{}:{}'.format(end, end-1))
#         ]

class PutIntoWasher(Action):
    def __init__(self):
        self.name = 'put_into_washer'
        self.timesteps = 30
        end = self.timesteps - 1
        self.args = '(?robot - Robot ?washer - Washer ?wp - WasherPose ?cloth - Cloth ?target - ClothTarget ?sp - RobotPose ?ee_left - EEPose ?ep - RobotPose)'
        putdown_time = 10
        approach_time = 5
        retreat_time = end-5
        self.pre = [\
            ('(BaxterRobotAt ?robot ?sp)', '0:0'),
            ('(BaxterWasherAt ?washer ?wp)', '{}:{}'.format(0, end)),
            ('(BaxterClothInGripperLeft ?robot ?cloth)', '{}:{}'.format(0, putdown_time)),
            # ('(BaxterClothGraspValid ?ee_left ?target)', '{}:{}'.format(putdown_time, putdown_time)),
            ('(BaxterOpenGripperLeft ?robot)', '{}:{}'.format(putdown_time,  end)),
            ('(BaxterCloseGripperLeft ?robot)', '{}:{}'.format(0,  putdown_time-1)),
            ('(BaxterStationaryCloth ?cloth)', '{}:{}'.format(putdown_time, end-1)),
            ('(forall (?obj - Basket) \
                (BaxterStationary ?obj)\
            )', '0:{}'.format(end-1)),
            ('(forall (?obs - Washer)\
                (BaxterStationaryWasher ?obs)\
            )', '{}:{}'.format(0, end-1)),
            ('(forall (?obs - Washer) (BaxterStationaryWasherDoor ?obs))', '0:{}'.format(end-1)),
            ('(forall (?obs - Obstacle)\
                (BaxterStationaryW ?obs)\
            )', '{}:{}'.format(0, end-1)),
            ('(BaxterStationaryBase ?robot)', '{}:{}'.format(0, end-1)),
            ('(BaxterIsMP ?robot)', '0:{}'.format(end-1)),
            ('(BaxterWithinJointLimit ?robot)', '0:{}'.format(end)),
            ('(forall (?obs - Obstacle)\
                (forall (?obj - Basket)\
                    (not (BaxterCollides ?obj ?obs))\
                )\
            )', '0:{}'.format(end-1)),
            ('(not (BaxterRSelfCollides ?robot))', '1:{}'.format(end-1)),
            ('(forall (?obs - Obstacle)\
                (not (BaxterRCollides ?robot ?obs))\
            )', '0:{}'.format(end)),
            ('(forall (?obj - Basket)\
                (not (BaxterObstructs ?robot ?sp ?ep ?obj))\
            )', '{}:{}'.format(0, end)),
            ('(not (BaxterCollidesWasher ?robot ?washer))', '{}:{}'.format(0, end))
        ]
        self.eff = [\
            ('(BaxterClothAt ?cloth ?target)', '{}:{}'.format(end, end)) ,
            ('(not (BaxterRobotAt ?robot ?sp))', '{}:{}'.format(end, end-1)),
            ('(BaxterRobotAt ?robot ?ep)', '{}:{}'.format(end, end)),
            ('(not (BaxterClothInGripperLeft ?robot ?cloth))', '{}:{}'.format(end, end)),
            ('(BaxterClothTargetInWasher ?target ?wp)', '{}:{}'.format(end, end)),
            ('(forall (?sym1 - RobotPose)\
                (forall (?sym2 - RobotPose)\
                    (not (BaxterObstructsCloth ?robot ?sym1 ?sym2 ?cloth))\
                )\
            )', '{}:{}'.format(end, end-1))
        ]

class TakeOutOfWasher(Action):
    def __init__(self):
        self.name = 'take_out_of_washer'
        self.timesteps = 30
        end = self.timesteps - 1
        self.args = '(?robot - Robot ?washer - Washer  ?wp - WasherPose ?cloth - Cloth ?target - ClothTarget ?sp - RobotPose ?ee_left - EEPose ?ep - RobotPose)'
        grasp_time = 10
        approach_time = 5
        retreat_time = end-5
        self.pre = [\
            ('(BaxterRobotAt ?robot ?sp)', '0:0'),
            ('(BaxterClothAt ?cloth ?target)', '0:0'),
            ('(BaxterWasherAt ?washer ?wp)', '{}:{}'.format(0, end)),
            ('(BaxterClothInGripperLeft ?robot ?cloth)', '{}:{}'.format(grasp_time, end)),
            ('(BaxterClothGraspValid ?ee_left ?target)', '{}:{}'.format(grasp_time, grasp_time)),
            ('(BaxterClothTargetInWasher ?target ?wp)', '{}:{}'.format(grasp_time, grasp_time)),
            ('(BaxterOpenGripperLeft ?robot)', '{}:{}'.format(1,  grasp_time-1)),
            ('(BaxterCloseGripperLeft ?robot)', '{}:{}'.format(grasp_time,  end)),
            ('(BaxterStationaryCloth ?cloth)', '{}:{}'.format(0, grasp_time)),
            ('(forall (?obj - Basket) \
                (BaxterStationary ?obj)\
            )', '0:{}'.format(end-1)),
            ('(forall (?obs - Washer)\
                (BaxterStationaryWasher ?obs)\
            )', '{}:{}'.format(0, end-1)),
            ('(forall (?obs - Washer) (BaxterStationaryWasherDoor ?obs))', '0:{}'.format(end-1)),
            ('(forall (?obs - Obstacle)\
                (BaxterStationaryW ?obs)\
            )', '{}:{}'.format(0, end-1)),
            ('(BaxterStationaryBase ?robot)', '{}:{}'.format(0, end-1)),
            ('(BaxterIsMP ?robot)', '0:{}'.format(end-1)),
            ('(BaxterWithinJointLimit ?robot)', '0:{}'.format(end)),
            ('(forall (?obs - Obstacle)\
                (forall (?obj - Basket)\
                    (not (BaxterCollides ?obj ?obs))\
                )\
            )', '0:{}'.format(end-1)),
            ('(not (BaxterRSelfCollides ?robot))', '1:{}'.format(end-1)),
            ('(forall (?obs - Obstacle)\
                (not (BaxterRCollides ?robot ?obs))\
            )', '0:{}'.format(end)),
            ('(forall (?obj - Basket)\
                (not (BaxterObstructs ?robot ?sp ?ep ?obj))\
            )', '{}:{}'.format(0, end)),
            ('(not (BaxterCollidesWasher ?robot ?washer))', '{}:{}'.format(0, end))
        ]
        self.eff = [\
            ('(not (BaxterRobotAt ?robot ?sp))', '{}:{}'.format(end, end-1)),
            ('(BaxterRobotAt ?robot ?ep)', '{}:{}'.format(end, end)),
            ('(forall (?sym1 - RobotPose)\
                (forall (?sym2 - RobotPose)\
                    (not (BaxterObstructsCloth ?robot ?sym1 ?sym2 ?cloth))\
                )\
            )', '{}:{}'.format(end, end-1))
        ]

class PutIntoBasket(Action):
    def __init__(self):
        self.name = 'put_into_basket'
        self.timesteps = 2 * const.EEREACHABLE_STEPS + 11
        end = self.timesteps - 1
        self.args = '(?robot - Robot ?cloth - Cloth ?basket - Basket ?ct - ClothTarget ?bt - BasketTarget ?sp - RobotPose ?ee_left - EEPose ?ep - RobotPose)'
        putdown_time = const.EEREACHABLE_STEPS+5
        approach_time = 5
        retreat_time = end-5
        self.pre = [\
            ('(BaxterRobotAt ?robot ?sp)', '0:0'),
            ('(BaxterAt ?basket ?bt)', '0:{}'.format(end)),
            # ('(BaxterEEReachableLeftVer ?robot ?sp ?ee_left)', '{}:{}'.format(putdown_time, putdown_time)),
            ('(BaxterClothInGripperLeft ?robot ?cloth)', '{}:{}'.format(0, putdown_time)),
            ('(BaxterClothGraspValid ?ee_left ?ct)', '{}:{}'.format(putdown_time, putdown_time)),
            ('(BaxterOpenGripperLeft ?robot)', '{}:{}'.format(putdown_time,  end)),
            ('(BaxterCloseGripperLeft ?robot)', '{}:{}'.format(0,  putdown_time-1)),
            ('(BaxterStationaryCloth ?cloth)', '{}:{}'.format(putdown_time, end-1)),
            ('(BaxterStationary ?basket)', '0:{}'.format(end-1)),
            ('(forall (?obs - Washer)\
                (BaxterStationaryWasher ?obs)\
            )', '{}:{}'.format(0, end-1)),
            ('(forall (?obs - Washer) (BaxterStationaryWasherDoor ?obs))', '0:{}'.format(end-1)),
            ('(forall (?obs - Obstacle)\
                (BaxterStationaryW ?obs)\
            )', '{}:{}'.format(0, end-1)),
            ('(BaxterStationaryBase ?robot)', '{}:{}'.format(0, end-1)),
            ('(BaxterIsMP ?robot)', '0:{}'.format(end-1)),
            ('(BaxterWithinJointLimit ?robot)', '0:{}'.format(end)),
            ('(not (BaxterRSelfCollides ?robot))', '1:{}'.format(end-1)),
            ('(forall (?obs - Obstacle)\
                (forall (?obj - Basket)\
                    (not (BaxterCollides ?obj ?obs))\
                )\
            )', '0:{}'.format(end-1)),
            ('(forall (?obs - Obstacle)\
                (not (BaxterRCollides ?robot ?obs))\
            )', '0:{}'.format(end)),
            ('(forall (?obj - Basket)\
                (not (BaxterObstructs ?robot ?sp ?ep ?obj))\
            )', '{}:{}'.format(0, end))
        ]
        self.eff = [\
            ('(BaxterClothAt ?cloth ?ct)', '{}:{}'.format(end, end)),
            ('(not (BaxterRobotAt ?robot ?sp))', '{}:{}'.format(end, end-1)),
            ('(BaxterClothTargetInBasket ?ct ?bt)', '{}:{}'.format(end, end)),
            ('(BaxterRobotAt ?robot ?ep)', '{}:{}'.format(end, end)),
            ('(not (BaxterClothInGripperLeft ?robot ?cloth))', '{}:{}'.format(end, end)),
            ('(forall (?sym1 - RobotPose)\
                (forall (?sym2 - RobotPose)\
                    (not (BaxterObstructsCloth ?robot ?sym1 ?sym2 ?cloth))\
                )\
            )', '{}:{}'.format(end, end-1))
        ]

class CenterGrippers(Action):
    def __init__(self):
        self.name = 'center_grippers'
        self.timesteps = 2 * const.EEREACHABLE_STEPS + 11
        end = self.timesteps - 1
        self.args = '(?robot - Robot ?basket - Basket ?bt - BasketTarget ?sp - RobotPose)'
        self.pre = [\
            ('(BaxterRobotAt ?robot ?sp)', '0:0'),
            ('(BaxterAt ?basket ?bt)', '0:{}'.format(end)),
            ('(BaxterStationary ?basket)', '0:{}'.format(end-1)),
            ('(forall (?obs - Washer)\
                (BaxterStationaryWasher ?obs)\
            )', '{}:{}'.format(0, end-1)),
            ('(forall (?obs - Washer) (BaxterStationaryWasherDoor ?obs))', '0:{}'.format(end-1)),
            ('(forall (?obs - Obstacle)\
                (BaxterStationaryW ?obs)\
            )', '{}:{}'.format(0, end-1)),
            ('(BaxterStationaryBase ?robot)', '{}:{}'.format(0, end-1)),
            ('(BaxterIsMP ?robot)', '0:{}'.format(end-1)),
            ('(BaxterWithinJointLimit ?robot)', '0:{}'.format(end)),
            # ('(not (BaxterRSelfCollides ?robot))', '0:{}'.format(end)),
            ('(forall (?obs - Obstacle)\
                (forall (?obj - Basket)\
                    (not (BaxterCollides ?obj ?obs))\
                )\
            )', '0:{}'.format(end-1)),
            ('(forall (?obs - Obstacle)\
                (not (BaxterRCollides ?robot ?obs))\
            )', '0:{}'.format(end))
        ]
        self.eff = [\
            ('(BaxterGrippersCenteredOverBasket ?robot ?basket)', '{}:{}'.format(end, end)),
        ]

class Rotate(Action):
    def __init__(self):
        self.name = 'rotate'
        self.timesteps = 30
        end = self.timesteps - 1
        start_rot_time = 7
        self.args = '(?robot - Robot ?start - RobotPose ?end - RobotPose ?end_rot - Rotation)'
        self.pre = [\
            ('(forall (?obj - Basket)\
                (not (BaxterBasketInGripper ?robot ?obj))\
            )', '{}:{}'.format(0, 0)),
            ('(BaxterRobotAt ?robot ?start)', '{}:{}'.format(0, 0)),
            ('(BaxterPoseAtRotation ?end ?end_rot)', '{}:{}'.format(end, end)),
            ('(forall (?obj - Basket)\
                (not (BaxterObstructs ?robot ?start ?end ?obj)))', '{}:{}'.format(0, end-1)),
            ('(forall (?obj - Washer)\
                (not (BaxterCollidesWasher ?robot ?obj)))', '{}:{}'.format(0, end-1)),
            ('(BaxterStationaryArms ?robot)', '{}:{}'.format(0, end-1)),
            # ('(BaxterStationaryArms ?robot)', '{}:{}'.format(start_rot_time, end-start_rot_time)),
            # ('(BaxterStationaryBase ?robot)', '{}:{}'.format(0, start_rot_time)),
            # ('(BaxterStationaryBase ?robot)', '{}:{}'.format(end-start_rot_time, end-1)),
            ('(forall (?obj - Basket)\
                (BaxterStationary ?obj))', '{}:{}'.format(0, end-1)),
            ('(forall (?obs - Cloth) (BaxterStationaryCloth ?obs))', '0:{}'.format(end-1)),
            ('(forall (?obj - Washer)\
                (BaxterStationaryWasher ?obj))', '{}:{}'.format(0, end-1)),
            ('(forall (?obj - Washer)\
                (BaxterStationaryWasherDoor ?obj))', '{}:{}'.format(0, end-1)),
            ('(forall (?obs - Obstacle) (BaxterStationaryW ?obs))', '{}:{}'.format(0, end-1)),
            ('(forall (?basket - Basket) (BaxterBasketLevel ?basket))', '{}:{}'.format(0, end)),
            ('(BaxterIsMP ?robot)', '{}:{}'.format(0, end-1)),
            ('(BaxterWithinRotLimit ?robot)', '{}:{}'.format(0, end)),
            ('(forall (?w - Obstacle) (not (BaxterRCollides ?robot ?w)))', '{}:{}'.format(0, end)),
            # ('(not (BaxterRSelfCollides ?robot))', '0:{}'.format(end)),
        ]
        self.eff = [\
            (' (not (BaxterRobotAt ?robot ?start))', '{}:{}'.format(end, end-1)),
            ('(BaxterRobotAt ?robot ?end)', '{}:{}'.format(end, end))]

class RotateHoldingBasket(Action):
    def __init__(self):
        self.name = 'rotate_holding_basket'
        self.timesteps = 20
        end = self.timesteps - 1
        self.args = '(?robot - Robot ?basket - Basket ?start - RobotPose ?end - RobotPose ?end_rot - Rotation)'
        self.pre = [\
            ('(BaxterRobotAt ?robot ?start)', '0:0'),
            ('(BaxterPoseAtRotation ?end ?end_rot)', '{}:{}'.format(end, end)),
            ('(BaxterBasketInGripper ?robot ?basket)', '0:{}'.format(end)),
            ('(BaxterCloseGrippers ?robot)', '0:{}'.format(end)),
            ('(forall (?obj - Basket)\
                (not (BaxterObstructsHolding ?robot ?start ?end ?obj ?basket))\
            )', '0:{}'.format(end)),
            ('(forall (?obj - Washer)\
                (not (BaxterCollidesWasher ?robot ?obj)))', '{}:{}'.format(0, end-1)),
            ('(BaxterStationaryArms ?robot)', '{}:{}'.format(0, end-1)),
            ('(forall (?obs - Washer) (BaxterStationaryWasher ?obs))', '0:{}'.format(end-1)),
            ('(forall (?obs - Washer) (BaxterStationaryWasherDoor ?obs))', '0:{}'.format(end-1)),
            ('(forall (?obs - Obstacle) (BaxterStationaryW ?obs))', '0:{}'.format(end-1)),
            ('(BaxterIsMP ?robot)', '0:{}'.format(end-1)),
            ('(BaxterWithinJointLimit ?robot)', '0:{}'.format(end)),
            ('(BaxterBasketLevel ?basket)', '{}:{}'.format(0, end)),
            ('(forall (?obs - Obstacle)\
                (forall (?obj - Basket)\
                    (not (BaxterCollides ?obj ?obs))\
                )\
            )', '0:{}'.format(end)),
            # ('(not (BaxterRSelfCollides ?robot))', '0:{}'.format(end)),
            ('(forall (?obs - Obstacle) (not (BaxterRCollides ?robot ?obs)))', '0:{}'.format(end))
        ]
        self.eff = [\
            ('(BaxterBasketInGripper ?robot ?basket)', '0:{}'.format(end)),
            ('(not (BaxterRobotAt ?robot ?start))', '{}:{}'.format(end, end-1)),
            ('(BaxterRobotAt ?robot ?end)', '{}:{}'.format(end, end))
        ]

class RotateHoldingCloth(Action):
    def __init__(self):
        self.name = 'rotate_holding_cloth'
        self.timesteps = 20
        end = self.timesteps - 1
        self.args = '(?robot - Robot ?cloth - Cloth ?start - RobotPose ?end - RobotPose ?end_rot - Rotation)'
        self.pre = [\
            ('(BaxterRobotAt ?robot ?start)', '0:0'),
            ('(BaxterPoseAtRotation ?end ?end_rot)', '{}:{}'.format(end, end)),
            ('(BaxterCloseGrippers ?robot)', '0:{}'.format(end)),
            ('(forall (?obj - Basket)\
                (not (BaxterObstructsHoldingCloth ?robot ?start ?end ?obj ?cloth))\
            )', '0:{}'.format(end)),
            ('(forall (?obj - Washer)\
                (not (BaxterCollidesWasher ?robot ?obj)))', '{}:{}'.format(0, end-1)),
            ('(forall (?obj - Basket)\
                (BaxterStationary ?obj))', '{}:{}'.format(0, end-1)),
            ('(BaxterStationaryArms ?robot)', '{}:{}'.format(0, end-1)),
            ('(forall (?obs - Washer) (BaxterStationaryWasher ?obs))', '0:{}'.format(end-1)),
            ('(forall (?obs - Washer) (BaxterStationaryWasherDoor ?obs))', '0:{}'.format(end-1)),
            ('(forall (?obs - Obstacle) (BaxterStationaryW ?obs))', '0:{}'.format(end-1)),
            ('(BaxterIsMP ?robot)', '0:{}'.format(end-1)),
            ('(BaxterWithinJointLimit ?robot)', '0:{}'.format(end)),
            ('(forall (?obs - Obstacle)\
                (forall (?obj - Basket)\
                    (not (BaxterCollides ?obj ?obs))\
                )\
            )', '0:{}'.format(end)),
            ('(not (BaxterRSelfCollides ?robot))', '1:{}'.format(end-1)),
            ('(forall (?obs - Obstacle) (not (BaxterRCollides ?robot ?obs)))', '0:{}'.format(end))
        ]
        self.eff = [\
            ('(BaxterClothInGripperLeft ?robot ?cloth)', '{}:{}'.format(end, end)),
            ('(not (BaxterRobotAt ?robot ?start))', '{}:{}'.format(end, end-1)),
            ('(BaxterRobotAt ?robot ?end)', '{}:{}'.format(end, end))
        ]

class RotateHoldingBasketWithCloth(Action):
    def __init__(self):
        self.name = 'rotate_holding_basket_with_cloth'
        self.timesteps = 20
        end = self.timesteps - 1
        self.args = '(?robot - Robot ?basket - Basket ?start - RobotPose ?end - RobotPose ?end_rot - Rotation)'
        self.pre = [\
            ('(BaxterRobotAt ?robot ?start)', '0:0'),
            ('(BaxterPoseAtRotation ?end ?end_rot)', '{}:{}'.format(end, end)),
            ('(BaxterBasketInGripper ?robot ?basket)', '0:{}'.format(end)),
            ('(BaxterCloseGrippers ?robot)', '0:{}'.format(end)),
            ('(forall (?obj - Basket)\
                (not (BaxterObstructsHolding ?robot ?start ?end ?obj ?basket))\
            )', '0:{}'.format(end)),
            ('(forall (?obj - Washer)\
                (not (BaxterObstructsWasher ?robot ?start ?end ?obj)))', '{}:{}'.format(0, end-1)),
            ('(BaxterStationaryArms ?robot)', '{}:{}'.format(0, end-1)),
            ('(forall (?obs - Washer) (BaxterStationaryWasher ?obs))', '0:{}'.format(end-1)),
            ('(forall (?obs - Washer) (BaxterStationaryWasherDoor ?obs))', '0:{}'.format(end-1)),
            ('(forall (?obs - Obstacle) (BaxterStationaryW ?obs))', '0:{}'.format(end-1)),
            ('(BaxterIsMP ?robot)', '0:{}'.format(end-1)),
            ('(BaxterWithinJointLimit ?robot)', '0:{}'.format(end)),
            ('(BaxterBasketLevel ?basket)', '{}:{}'.format(0, end)),
            ('(forall (?obs - Obstacle)\
                (forall (?obj - Basket)\
                    (not (BaxterCollides ?obj ?obs))\
                )\
            )', '0:{}'.format(end)),
            # ('(not (BaxterRSelfCollides ?robot))', '0:{}'.format(end)),
            ('(forall (?obs - Obstacle) (not (BaxterRCollides ?robot ?obs)))', '0:{}'.format(end)),
            ('(forall (?cloth - Cloth) (BaxterObjRelPoseConstant ?basket ?cloth))', '0:{}'.format(end))
        ]
        self.eff = [\
            ('(BaxterBasketInGripper ?robot ?basket)', '0:{}'.format(end)),
            ('(not (BaxterRobotAt ?robot ?start))', '{}:{}'.format(end, end-1)),
            ('(BaxterRobotAt ?robot ?end)', '{}:{}'.format(end, end))
        ]

class GrabCornerLeft(Action):
    def __init__(self):
        self.name = 'grab_corner_left'
        self.timesteps = 20
        grasp_time = 10
        end = self.timesteps - 1
        self.args = '(?robot - Robot ?grasp_point - EEPose ?end_point - EEPose ?start - RobotPose ?mid - RobotPose ?end - RobotPose)'
        self.pre = [\
            ('(BaxterRobotAt ?robot ?start)', '0:0'),
            ('(BaxterRobotAt ?robot ?mid)', '{}:{}'.format(grasp_time, grasp_time)),
            ('(BaxterGripperAtLeft ?robot ?grasp_point)', '{}:{}'.format(grasp_time, grasp_time)),
            ('(BaxterOpenGripperLeft ?robot)', '{}:{}'.format(0, grasp_time-1)),
            ('(BaxterCloseGripperLeft ?robot)', '{}:{}'.format(grasp_time, end)),
            ('(forall (?obj - Washer)\
                (not (BaxterCollidesWasher ?robot ?obj)))', '{}:{}'.format(0, end-1)),
            ('(BaxterStationaryBase ?robot)', '{}:{}'.format(0, end-1)),
            ('(forall (?obj - Basket)\
                (BaxterStationary ?obj))', '{}:{}'.format(0, end-1)),
            ('(forall (?obs - Cloth) (BaxterStationaryCloth ?obs))', '0:{}'.format(end-1)),
            ('(forall (?obj - Washer)\
                (BaxterStationaryWasher ?obj))', '{}:{}'.format(0, end-1)),
            ('(forall (?obj - Washer)\
                (BaxterStationaryWasherDoor ?obj))', '{}:{}'.format(0, end-1)),
            ('(forall (?obs - Obstacle) (BaxterStationaryW ?obs))', '{}:{}'.format(0, end-1)),
            ('(BaxterIsMP ?robot)', '0:{}'.format(end-1)),
            ('(BaxterWithinJointLimit ?robot)', '0:{}'.format(end)),
            ('(not (BaxterRSelfCollides ?robot))', '1:{}'.format(end-1)),
            ('(forall (?obs - Obstacle) (not (BaxterRCollides ?robot ?obs)))', '0:{}'.format(end)),
        ]
        self.eff = [\
            ('(BaxterGripperAtLeft ?robot ?end_point)', '{}:{}'.format(end, end)),
            ('(not (BaxterRobotAt ?robot ?start))', '{}:{}'.format(end, end-1)),
            ('(BaxterRobotAt ?robot ?end)', '{}:{}'.format(end, end))
        ]

class GrabCornerRight(Action):
    def __init__(self):
        self.name = 'grab_corner_right'
        self.timesteps = 20
        grasp_time = 10
        end = self.timesteps - 1
        self.args = '(?robot - Robot ?grasp_point - EEPose ?end_point - EEPose ?start - RobotPose ?end - RobotPose)'
        self.pre = [\
            ('(BaxterRobotAt ?robot ?start)', '0:0'),
            ('(BaxterGripperAtRight ?robot ?grasp_point)', '{}:{}'.format(grasp_time, grasp_time)),
            ('(BaxterOpenGripperRight ?robot)', '{}:{}'.format(0, grasp_time-1)),
            ('(BaxterCloseGripperRight ?robot)', '{}:{}'.format(grasp_time, end)),
            ('(forall (?obj - Washer)\
                (not (BaxterCollidesWasher ?robot ?obj)))', '{}:{}'.format(0, end-1)),
            ('(BaxterStationaryBase ?robot)', '{}:{}'.format(0, end-1)),
            ('(forall (?obj - Basket)\
                (BaxterStationary ?obj))', '{}:{}'.format(0, end-1)),
            ('(forall (?obs - Cloth) (BaxterStationaryCloth ?obs))', '0:{}'.format(end-1)),
            ('(forall (?obj - Washer)\
                (BaxterStationaryWasher ?obj))', '{}:{}'.format(0, end-1)),
            ('(forall (?obj - Washer)\
                (BaxterStationaryWasherDoor ?obj))', '{}:{}'.format(0, end-1)),
            ('(forall (?obs - Obstacle) (BaxterStationaryW ?obs))', '{}:{}'.format(0, end-1)),
            ('(BaxterIsMP ?robot)', '0:{}'.format(end-1)),
            ('(BaxterWithinJointLimit ?robot)', '0:{}'.format(end)),
            ('(not (BaxterRSelfCollides ?robot))', '1:{}'.format(end-1)),
            ('(forall (?obs - Obstacle) (not (BaxterRCollides ?robot ?obs)))', '0:{}'.format(end)),
        ]
        self.eff = [\
            ('(BaxterGripperAtRight ?robot ?end_point)', '{}:{}'.format(end, end)),
            ('(not (BaxterRobotAt ?robot ?start))', '{}:{}'.format(end, end-1)),
            ('(BaxterRobotAt ?robot ?end)', '{}:{}'.format(end, end))
        ]

class DragClothLeft(Action):
    def __init__(self):
        self.name = 'drag_cloth_left'
        self.timesteps = 20
        end = self.timesteps - 1
        at_time_1 = 3
        at_time_2 = 10
        at_time_3 = 17
        self.args = '(?robot - Robot ?point_1 - EEPose ?point_2 - EEPose ?point_3 - EEPose ?start - RobotPose ?end - RobotPose)'
        self.pre = [\
            ('(BaxterRobotAt ?robot ?start)', '0:0'),
            ('(BaxterGripperAtLeft ?robot ?point_1)', '{}:{}'.format(at_time_1, at_time_1)),
            ('(BaxterGripperAtLeft ?robot ?point_2)', '{}:{}'.format(at_time_2, at_time_2)),
            ('(BaxterGripperAtLeft ?robot ?point_3)', '{}:{}'.format(at_time_2, at_time_3)),
            ('(BaxterCloseGripperLeft ?robot)', '{}:{}'.format(0,  at_time_3-1)),
            ('(forall (?obj - Washer)\
                (not (BaxterCollidesWasher ?robot ?obj)))', '{}:{}'.format(0, end-1)),
            ('(BaxterStationaryBase ?robot)', '{}:{}'.format(0, end-1)),
            ('(forall (?obj - Basket)\
                (BaxterStationary ?obj))', '{}:{}'.format(0, end-1)),
            ('(forall (?obs - Cloth) (BaxterStationaryCloth ?obs))', '0:{}'.format(end-1)),
            ('(forall (?obj - Washer)\
                (BaxterStationaryWasher ?obj))', '{}:{}'.format(0, end-1)),
            ('(forall (?obj - Washer)\
                (BaxterStationaryWasherDoor ?obj))', '{}:{}'.format(0, end-1)),
            ('(forall (?obs - Obstacle) (BaxterStationaryW ?obs))', '{}:{}'.format(0, end-1)),
            ('(BaxterIsMP ?robot)', '0:{}'.format(end-1)),
            ('(BaxterWithinJointLimit ?robot)', '0:{}'.format(end)),
            ('(not (BaxterRSelfCollides ?robot))', '0:{}'.format(end)),
            ('(forall (?obs - Obstacle) (not (BaxterRCollides ?robot ?obs)))', '0:{}'.format(end)),
        ]
        self.eff = [\
            ('(BaxterOpenGripperLeft ?robot)', '{}:{}'.format(at_time_3, end)),
            ('(not (BaxterRobotAt ?robot ?start))', '{}:{}'.format(end, end-1)),
            ('(BaxterRobotAt ?robot ?end)', '{}:{}'.format(end, end))
        ]

class DragClothBoth(Action):
    def __init__(self):
        self.name = 'drag_cloth_both'
        self.timesteps = 20
        end = self.timesteps - 1
        at_time_1 = 4
        at_time_2 = 11
        at_time_3 = 18
        self.args = '(?robot - Robot ?left_point_1 - EEPose ?left_point_2 - EEPose ?left_point_3 - EEPose ?right_point_1 - EEPose ?right_point_2 - EEPose ?right_point_3 - EEPose ?start - RobotPose ?end - RobotPose)'
        self.pre = [\
            ('(BaxterRobotAt ?robot ?start)', '0:0'),
            ('(BaxterGripperAtLeft ?robot ?left_point_1)', '{}:{}'.format(at_time_1, at_time_1)),
            ('(BaxterGripperAtLeft ?robot ?left_point_2)', '{}:{}'.format(at_time_2, at_time_2)),
            ('(BaxterCloseGripperLeft ?robot)', '{}:{}'.format(0,  at_time_3-1)),
            ('(BaxterGripperAtRight ?robot ?right_point_1)', '{}:{}'.format(at_time_1, at_time_1)),
            ('(BaxterGripperAtRight ?robot ?right_point_2)', '{}:{}'.format(at_time_2, at_time_2)),
            ('(BaxterCloseGripperRight ?robot)', '{}:{}'.format(0,  at_time_3-1)),
            ('(BaxterGripperAtLeft ?robot ?left_point_3)', '{}:{}'.format(at_time_3, at_time_3)),
            ('(BaxterGripperAtRight ?robot ?right_point_3)', '{}:{}'.format(at_time_3, at_time_3)),
            ('(forall (?obj - Washer)\
                (not (BaxterCollidesWasher ?robot ?obj)))', '{}:{}'.format(0, end-1)),
            ('(BaxterStationaryBase ?robot)', '{}:{}'.format(0, end-1)),
            ('(forall (?obj - Basket)\
                (BaxterStationary ?obj))', '{}:{}'.format(0, end-1)),
            ('(forall (?obs - Cloth) (BaxterStationaryCloth ?obs))', '0:{}'.format(end-1)),
            ('(forall (?obj - Washer)\
                (BaxterStationaryWasher ?obj))', '{}:{}'.format(0, end-1)),
            ('(forall (?obj - Washer)\
                (BaxterStationaryWasherDoor ?obj))', '{}:{}'.format(0, end-1)),
            ('(forall (?obs - Obstacle) (BaxterStationaryW ?obs))', '{}:{}'.format(0, end-1)),
            ('(BaxterIsMP ?robot)', '0:{}'.format(end-1)),
            ('(BaxterWithinJointLimit ?robot)', '0:{}'.format(end)),
            ('(not (BaxterRSelfCollides ?robot))', '0:{}'.format(end)),
            ('(forall (?obs - Obstacle) (not (BaxterRCollides ?robot ?obs)))', '0:{}'.format(end)),
        ]
        self.eff = [\
            ('(BaxterOpenGripperLeft ?robot)', '{}:{}'.format(at_time_3,  end)),
            ('(BaxterOpenGripperRight ?robot)', '{}:{}'.format(at_time_3,  end)),
            ('(not (BaxterRobotAt ?robot ?start))', '{}:{}'.format(end, end-1)),
            ('(BaxterRobotAt ?robot ?end)', '{}:{}'.format(end, end))
        ]

class FoldInHalf(Action):
    def __init__(self):
        self.name = 'fold_in_half'
        self.timesteps = 30
        end = self.timesteps - 1
        at_time_1 = 8
        at_time_2 = 12
        at_time_3 = 18
        at_time_4 = 24
        self.args = '(?robot - Robot ?left_point_1 - EEPose ?left_point_2 - EEPose ?left_point_3 - EEPose ?left_point_4 - EEPose '\
                    + '?right_point_1 - EEPose ?right_point_2 - EEPose ?right_point_3 - EEPose ?right_point_4 - EEPose ?start - RobotPose ?end - RobotPose)'
        self.pre = [\
            ('(BaxterRobotAt ?robot ?start)', '0:0'),
            ('(BaxterGripperAtLeft ?robot ?left_point_1)', '{}:{}'.format(at_time_1, at_time_1)),
            ('(BaxterGripperAtLeft ?robot ?left_point_2)', '{}:{}'.format(at_time_2, at_time_2)),
            ('(BaxterCloseGripperLeft ?robot)', '{}:{}'.format(0,  at_time_4)),
            ('(BaxterGripperAtRight ?robot ?right_point_1)', '{}:{}'.format(at_time_1, at_time_1)),
            ('(BaxterGripperAtRight ?robot ?right_point_2)', '{}:{}'.format(at_time_2, at_time_2)),
            ('(BaxterCloseGripperRright ?robot)', '{}:{}'.format(0,  at_time_4)),
            ('(BaxterGripperAtLeft ?robot ?left_point_3)', '{}:{}'.format(at_time_3, at_time_3)),
            ('(BaxterGripperAtRight ?robot ?right_point_3)', '{}:{}'.format(at_time_3, at_time_3)),
            ('(BaxterGripperAtLeft ?robot ?left_point_4)', '{}:{}'.format(at_time_4, at_time_4)),
            ('(BaxterGripperAtRight ?robot ?right_point_4)', '{}:{}'.format(at_time_4, at_time_4)),
            ('(forall (?obj - Washer)\
                (not (BaxterCollidesWasher ?robot ?obj)))', '{}:{}'.format(0, end-1)),
            ('(BaxterStationaryBase ?robot)', '{}:{}'.format(0, end-1)),
            ('(forall (?obj - Basket)\
                (BaxterStationary ?obj))', '{}:{}'.format(0, end-1)),
            ('(forall (?obs - Cloth) (BaxterStationaryCloth ?obs))', '0:{}'.format(end-1)),
            ('(forall (?obj - Washer)\
                (BaxterStationaryWasher ?obj))', '{}:{}'.format(0, end-1)),
            ('(forall (?obj - Washer)\
                (BaxterStationaryWasherDoor ?obj))', '{}:{}'.format(0, end-1)),
            ('(forall (?obs - Obstacle) (BaxterStationaryW ?obs))', '{}:{}'.format(0, end-1)),
            ('(BaxterIsMP ?robot)', '0:{}'.format(end-1)),
            ('(BaxterWithinJointLimit ?robot)', '0:{}'.format(end)),
            ('(not (BaxterRSelfCollides ?robot))', '0:{}'.format(end)),
            ('(forall (?obs - Obstacle) (not (BaxterRCollides ?robot ?obs)))', '0:{}'.format(end)),
        ]
        self.eff = [\
            ('(BaxterOpenGripperLeft ?robot)', '{}:{}'.format(at_time_4+1,  end)),
            ('(BaxterOpenGripperRight ?robot)', '{}:{}'.format(at_time_4+1,  end)),
            ('(not (BaxterRobotAt ?robot ?start))', '{}:{}'.format(end, end-1)),
            ('(BaxterRobotAt ?robot ?end)', '{}:{}'.format(end, end))
        ]

class MoveToEEPos(Action):
    def __init__(self):
        self.name = 'moveto_ee_pos'
        self.timesteps = 30
        end = self.timesteps - 1
        self.args = '(?robot - Robot ?ee_left - EEPose ?ee_right - EEPose ?start - RobotPose ?end - RobotPose)'
        self.pre = [\
            ('(forall (?obj - Basket)\
                (not (BaxterBasketInGripper ?robot ?obj))\
            )', '{}:{}'.format(0, 0)),
            ('(BaxterRobotAt ?robot ?start)', '{}:{}'.format(0, 0)),
            ('(forall (?obj - Basket)\
                (not (BaxterObstructs ?robot ?start ?end ?obj)))', '{}:{}'.format(0, end-1)),
            ('(forall (?obj - Washer)\
                (not (BaxterCollidesWasher ?robot ?obj)))', '{}:{}'.format(0, end-1)),
            ('(BaxterStationaryBase ?robot)', '{}:{}'.format(0, end-1)),
            ('(forall (?obj - Basket)\
                (BaxterStationary ?obj))', '{}:{}'.format(0, end-1)),
            ('(forall (?obs - Cloth) (BaxterStationaryCloth ?obs))', '0:{}'.format(end-1)),
            ('(forall (?obj - Washer)\
                (BaxterStationaryWasher ?obj))', '{}:{}'.format(0, end-1)),
            ('(forall (?obj - Washer)\
                (BaxterStationaryWasherDoor ?obj))', '{}:{}'.format(0, end-1)),
            ('(forall (?obs - Obstacle) (BaxterStationaryW ?obs))', '{}:{}'.format(0, end-1)),
            ('(BaxterIsMP ?robot)', '{}:{}'.format(0, end-1)),
            ('(BaxterWithinJointLimit ?robot)', '{}:{}'.format(0, end)),
            ('(BaxterCloseGrippers ?robot)', '{}:{}'.format(0, end)),
            ('(forall (?obs - Obstacle)\
                (forall (?obj - Basket)\
                    (not (BaxterCollides ?obj ?obs))\
                ))','{}:{}'.format(0, end)),
            ('(forall (?w - Obstacle) (not (BaxterRCollides ?robot ?w)))', '{}:{}'.format(0, end)),
            ('(not (BaxterRSelfCollides ?robot))', '0:{}'.format(end)),
        ]
        self.eff = [\
            ('(BaxterGripperAtRight ?robot ?ee_right)', '{}:{}'.format(end, end)),
            ('(BaxterGripperAtLeft ?robot ?ee_left)', '{}:{}'.format(end, end)),
            (' (not (BaxterRobotAt ?robot ?start))', '{}:{}'.format(end, end-1)),
            ('(BaxterRobotAt ?robot ?end)', '{}:{}'.format(end, end))]

class MoveToEEPosLeft(Action):
    def __init__(self):
        self.name = 'moveto_ee_pos_left'
        self.timesteps = 30
        end = self.timesteps - 1
        self.args = '(?robot - Robot ?ee_left - EEPose ?start - RobotPose ?end - RobotPose)'
        self.pre = [\
            ('(forall (?obj - Basket)\
                (not (BaxterBasketInGripper ?robot ?obj))\
            )', '{}:{}'.format(0, 0)),
            ('(BaxterRobotAt ?robot ?start)', '{}:{}'.format(0, 0)),
            ('(forall (?obj - Basket)\
                (not (BaxterObstructs ?robot ?start ?end ?obj)))', '{}:{}'.format(0, end-1)),
            ('(forall (?obj - Washer)\
                (not (BaxterCollidesWasher ?robot ?obj)))', '{}:{}'.format(0, end-1)),
            ('(BaxterStationaryBase ?robot)', '{}:{}'.format(0, end-1)),
            ('(forall (?obj - Basket)\
                (BaxterStationary ?obj))', '{}:{}'.format(0, end-1)),
            ('(forall (?obs - Cloth) (BaxterStationaryCloth ?obs))', '0:{}'.format(end-1)),
            ('(forall (?obj - Washer)\
                (BaxterStationaryWasher ?obj))', '{}:{}'.format(0, end-1)),
            ('(forall (?obj - Washer)\
                (BaxterStationaryWasherDoor ?obj))', '{}:{}'.format(0, end-1)),
            ('(forall (?obs - Obstacle) (BaxterStationaryW ?obs))', '{}:{}'.format(0, end-1)),
            ('(BaxterIsMP ?robot)', '{}:{}'.format(0, end-1)),
            ('(BaxterWithinJointLimit ?robot)', '{}:{}'.format(0, end)),
            ('(BaxterCloseGrippers ?robot)', '{}:{}'.format(0, end)),
            ('(forall (?obs - Obstacle)\
                (forall (?obj - Basket)\
                    (not (BaxterCollides ?obj ?obs))\
                ))','{}:{}'.format(0, end)),
            ('(forall (?w - Obstacle) (not (BaxterRCollides ?robot ?w)))', '{}:{}'.format(0, end)),
            ('(not (BaxterRSelfCollides ?robot))', '0:{}'.format(end)),
        ]
        self.eff = [\
            ('(BaxterGripperAtLeft ?robot ?ee_left)', '{}:{}'.format(end, end)),
            ('(not (BaxterRobotAt ?robot ?start))', '{}:{}'.format(end, end-1)),
            ('(BaxterRobotAt ?robot ?end)', '{}:{}'.format(end, end))]

actions = [Move(), MoveHoldingBasket(), MoveHoldingCloth(), Grasp(), Putdown(), 
           OpenDoor(), CloseDoor(), ClothGrasp(), ClothPutdown(), PushDoorOpen(), 
           PutIntoWasher(), TakeOutOfWasher(), PutIntoBasket(), CenterGrippers(),
           MoveHoldingBasketWithCloth(), PutdownWithCloth(), GraspWithCloth(),
           Rotate(), RotateHoldingBasket(), RotateHoldingCloth(),
           RotateHoldingBasketWithCloth(), GrabCornerLeft(), GrabCornerRight(), 
           DragClothLeft(), DragClothBoth(), FoldInHalf(), MoveToEEPos(),
           MoveToEEPosLeft(), PushDoorClose(), ClothGraspFromHandle(),
           MoveAroundWasher(), BothMoveClothTo(), BothEndClothGrasp(),
           MoveNoCollisionCheck()]

for action in actions:
    dom_str += '\n\n'
    dom_str += action.to_str()

# removes all the extra spaces
dom_str = dom_str.replace('            ', '')
dom_str = dom_str.replace('    ', '')
dom_str = dom_str.replace('    ', '')

print dom_str
f = open('laundry.domain', 'w')
f.write(dom_str)
