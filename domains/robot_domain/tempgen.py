import sys
sys.path.insert(0, '../../src/')
import core.util_classes.common_constants as const
from core.util_classes.robots import *


dom_str = """
# AUTOGENERATED. DO NOT EDIT.
# Configuration file for CAN domain. Blank lines and lines beginning with # are filtered out.

# implicity, all types require a name
Types: Robot, RobotPose, CollisionShape 

# Define the class location of each non-standard attribute type used in the above parameter type descriptions.

Attribute Import Paths: Vector1d core.util_classes.matrix, Vector2d core.util_classes.matrix, \
                        Vector3d core.util_classes.matrix, ArmPose7d core.util_classes.matrix, \
                        Table core.util_classes.items, Box core.util_classes.items, \
                        Basket core.util_classes.items, Cloth core.util_classes.items, \
                        Can core.util_classes.items, Door core.util_classes.items, \
                        Sphere core.util_classes.items"""

robots = ['Baxter', 'Sawyer', 'Panda']
for robot in robots:
    dom_str += ", {} core.util_classes.robots".format(robot)

dom_str += """

Predicates Import Path: core.util_classes.robot_predicates

"""


# Automated handling to setup robot types
r_types = ""
for r in robots:
    r_types += "{}, ".format(r)
r_types = r_types[:-2] + " - Robot"

rpose_types = ""
for r in robots:
    rpose_types += "{}Pose, ".format(r)
rpose_types = rpose_types[:-2] + " - RobotPose"

# Parameters can have multiple types through inheritance
subtypes = "\nSubtypes: Obstacle, Reachable - CollisionShape; \
                        Item, Target, SlideTarget - Reachable; \
                        Cloth, Can, Box, Basket, Sphere - Item; \
                        Door - Obstacle; \
                        ClothTarget, BoxTarget, CanTarget, BasketTarget - Target"
subtypes += "; " + r_types + "; " + rpose_types + "\n"
dom_str += subtypes + "\n"


class PrimitivePredicates(object):
    def __init__(self):
        self.attr_dict = {}

    def add(self, name, attrs):
        self.attr_dict[name] = attrs

    def get_str(self):
        prim_str = 'Primitive Predicates: '
        first = True
        for name, attrs in list(self.attr_dict.items()):
            for attr_name, attr_type in attrs:
                pred_str = attr_name + ', ' + name + ', ' + attr_type
                if first:
                    prim_str += pred_str
                    first = False
                else:
                    prim_str += '; ' + pred_str
        return prim_str


pp = PrimitivePredicates()
pp.add('Reachable', [('value', 'Vector3d'), ('rotation', 'Vector3d')])
pp.add('CollisionShape', [('pose', 'Vector3d'), ('rotation', 'Vector3d')])
pp.add('Item', [('pose', 'Vector3d'), ('rotation', 'Vector3d')])
pp.add('Target', [('value', 'Vector3d'), ('rotation', 'Vector3d')])
pp.add('SlideTarget', [('value', 'Vector3d'), ('rotation', 'Vector3d')])

pp.add('Basket', [('geom', 'Basket'), ('pose', 'Vector3d'), ('rotation', 'Vector3d')])
pp.add('Cloth', [('geom', 'Cloth'), ('pose', 'Vector3d'), ('rotation', 'Vector3d')])
pp.add('Can', [('geom', 'Can'), ('pose', 'Vector3d'), ('rotation', 'Vector3d')])
pp.add('Sphere', [('geom', 'Sphere'), ('pose', 'Vector3d'), ('rotation', 'Vector3d')])
pp.add('Box', [('geom', 'Box'), ('pose', 'Vector3d'), ('rotation', 'Vector3d')])

pp.add('BasketTarget', [('geom', 'Basket'), ('value', 'Vector3d'), ('rotation', 'Vector3d')])
pp.add('ClothTarget', [('value', 'Vector3d'), ('rotation', 'Vector3d'), ('geom', 'Cloth')])
pp.add('CanTarget', [('value', 'Vector3d'), ('rotation', 'Vector3d'), ('geom', 'Can')])
pp.add('BoxTarget', [('value', 'Vector3d'), ('rotation', 'Vector3d'), ('geom', 'Box')])

pp.add('Robot', [('pose', 'Vector3d'), ('rotation', 'Vector3d')])
pp.add('RobotPose', [('value', 'Vector3d'), ('rotation', 'Vector3d')])

pp.add('Obstacle', [('geom', 'Box'), ('pose', 'Vector3d'), ('rotation', 'Vector3d')])
pp.add('Door', [('geom', 'Door'), ('pose', 'Vector3d'), ('rotation', 'Vector3d'), ('hinge', 'Vector1d')])


for r in robots:
    try:
        r_geom = eval("{0}()".format(r))
    except:
        print('Could not load geom for {}'.format(r))
        continue

    attrs = [('geom', r)]
    pose_attrs = []
    for arm in r_geom.arms:
        njnts = len(r_geom.jnt_names[arm])
        attrs.append((arm, 'ArmPose{0}d'.format(njnts)))
        pose_attrs.append((arm, 'ArmPose{0}d'.format(njnts)))
        gripper = r_geom.get_gripper(arm)
        njnts = r_geom.gripper_dim(arm)
        attrs.append((gripper, 'Vector{}d'.format(njnts)))
        pose_attrs.append((gripper, 'Vector{}d'.format(njnts)))
        attrs.append(('{}_ee_pos'.format(arm), 'Vector3d'))
        attrs.append(('{}_ee_rot'.format(arm), 'Vector3d'))
        pose_attrs.append(('{}_ee_pos'.format(arm), 'Vector3d'))
        pose_attrs.append(('{}_ee_rot'.format(arm), 'Vector3d'))

    pp.add(r, attrs)
    pp.add(r+"Pose", pose_attrs)

dom_str += pp.get_str() + '\n\n'


class DerivatedPredicates(object):
    def __init__(self):
        self.pred_dict = {}

    def add(self, name, args):
        self.pred_dict[name] = args

    def get_str(self):
        prim_str = 'Derived Predicates: '
        first = True
        for name, args in list(self.pred_dict.items()):
            pred_str = name
            for arg in args:
                pred_str += ', ' + arg

            if first:
                prim_str += pred_str
                first = False
            else:
                prim_str += '; ' + pred_str

        return prim_str


dp = DerivatedPredicates()
dp.add('At', ['Item', 'Reachable'])
dp.add('AtInit', ['Item', 'Reachable'])
dp.add('Near', ['Item', 'Reachable'])
dp.add('RobotAt', ['Robot', 'RobotPose'])

dp.add('IsMP', ['Robot'])
dp.add('WithinJointLimit', ['Robot'])

dp.add('Stationary', ['Item'])
dp.add('StationaryRot', ['Item'])
dp.add('StationaryNEq', ['Item', 'Item'])
dp.add('StationaryBase', ['Robot'])
dp.add('StationaryArms', ['Robot'])
dp.add('StationaryLeftArm', ['Robot'])
dp.add('StationaryRightArm', ['Robot'])
dp.add('StationaryW', ['Obstacle'])
dp.add('StationaryWBase', ['Obstacle'])
dp.add('StationaryXY', ['Item'])
dp.add('StationaryYZ', ['Item'])
dp.add('StationaryXZ', ['Item'])

dp.add('CloseGripper', ['Robot'])
dp.add('CloseGripperLeft', ['Robot'])
dp.add('CloseGripperRight', ['Robot'])
dp.add('OpenGripper', ['Robot'])
dp.add('OpenGripperLeft', ['Robot'])
dp.add('OpenGripperRight', ['Robot'])

dp.add('Obstructs', ['Robot', 'CollisionShape'])
dp.add('ObstructsHolding', ['Robot', 'CollisionShape', 'CollisionShape'])
dp.add('Collides', ['CollisionShape', 'CollisionShape'])
dp.add('RCollides', ['Robot', 'CollisionShape'])
dp.add('RSelfCollides', ['Robot'])

dp.add('EEReachable', ['Robot', 'Reachable'])
dp.add('EEReachableLeft', ['Robot', 'Reachable'])
dp.add('EEReachableRight', ['Robot', 'Reachable'])
dp.add('EEApproachLeft', ['Robot', 'Reachable'])
dp.add('EEApproachRight', ['Robot', 'Reachable'])
dp.add('EERetreatLeft', ['Robot', 'Reachable'])
dp.add('EERetreatRight', ['Robot', 'Reachable'])
dp.add('EEAtXYLeft', ['Robot', 'Reachable'])
dp.add('EEAtXYRight', ['Robot', 'Reachable'])
dp.add('EEAtXZLeft', ['Robot', 'Reachable'])
dp.add('EEAtXZRight', ['Robot', 'Reachable'])
dp.add('EEAtYZLeft', ['Robot', 'Reachable'])
dp.add('EEAtYZRight', ['Robot', 'Reachable'])
dp.add('EEAtRelXYLeft', ['Robot', 'Reachable'])
dp.add('EEAtRelXYRight', ['Robot', 'Reachable'])
dp.add('EEAtRelXZLeft', ['Robot', 'Reachable'])
dp.add('EEAtRelXZRight', ['Robot', 'Reachable'])
dp.add('EEAtRelYZLeft', ['Robot', 'Reachable'])
dp.add('EEAtRelYZRight', ['Robot', 'Reachable'])
dp.add('Approach', ['Robot', 'Reachable'])
dp.add('ApproachLeft', ['Robot', 'Reachable'])
dp.add('ApproachRight', ['Robot', 'Reachable'])
dp.add('NearApproach', ['Robot', 'Reachable'])
dp.add('NearApproachLeft', ['Robot', 'Reachable'])
dp.add('NearApproachRight', ['Robot', 'Reachable'])

dp.add('EEReachableRot', ['Robot', 'Reachable'])
dp.add('EEReachableLeftRot', ['Robot', 'Reachable'])
dp.add('EEReachableRightRot', ['Robot', 'Reachable'])
dp.add('ApproachRot', ['Robot', 'Reachable'])
dp.add('ApproachLeftRot', ['Robot', 'Reachable'])
dp.add('ApproachRightRot', ['Robot', 'Reachable'])
dp.add('EEAtLeftRot', ['Robot', 'Reachable'])
dp.add('EEAtRightRot', ['Robot', 'Reachable'])
dp.add('NearApproachRot', ['Robot', 'Reachable'])
dp.add('NearApproachLeftRot', ['Robot', 'Reachable'])
dp.add('NearApproachRightRot', ['Robot', 'Reachable'])

dp.add('InGripperLeft', ['Robot', 'Reachable'])
dp.add('InGripperRight', ['Robot', 'Reachable'])
dp.add('InGripper', ['Robot', 'Reachable'])
dp.add('NearGripper', ['Robot', 'Reachable'])
dp.add('NearGripperLeft', ['Robot', 'Reachable'])
dp.add('NearGripperRight', ['Robot', 'Reachable'])
dp.add('GripperAtLeft', ['Robot', 'Reachable'])
dp.add('GripperAtRight', ['Robot', 'Reachable'])
dp.add('GripperAt', ['Robot', 'Reachable'])

dp.add('GrippersDownRot', ['Robot'])
dp.add('LeftGripperDownRot', ['Robot'])
dp.add('RightGripperDownRot', ['Robot'])

# Useful for Robosuite 
dp.add('HeightBlock', ['Item', 'Item'])
dp.add('AboveTable', ['Item'])

# Useful for Robodesk
#dp.add('SlideDoorAt', ['Reachable', 'Door'])
#dp.add('SlideDoorOpen', ['Reachable', 'Door'])
#dp.add('SlideDoorClose', ['Reachable', 'Door'])
dp.add('Lifted', ['Item', 'Robot'])


dom_str += dp.get_str() + '\n'
dom_str += """

# The first set of parentheses after the colon contains the
# parameters. The second contains preconditions and the third contains
# effects. This split between preconditions and effects is only used
# for task planning purposes. Our system treats all predicates
# similarly, using the numbers at the end, which specify active
# timesteps during which each predicate must hold

"""


class Action(object):
    def __init__(self, name, timesteps, pre=None, post=None):
        self.name = name
        self.timesteps = timesteps
        if pre is not None:
            self.pre = pre

        if post is not None:
            self.post = post

    def to_str(self):
        time_str = ''
        cond_str = '(and '
        for pre, timesteps in self.pre:
            cond_str += pre + ' '
            time_str += timesteps + ' '

        cond_str += ')'
        cond_str += '(and '
        for eff, timesteps in self.eff:
            cond_str += eff + ' '
            time_str += timesteps + ' '

        cond_str += ')'
        return "Action " + self.name + ' ' + str(self.timesteps) + ': ' + self.args + ' ' + cond_str + ' ' + time_str


class Move(Action):
    def __init__(self):
        self.name = 'moveto'
        self.timesteps = 17
        end = self.timesteps - 1
        self.end = end
        self.args = '(?robot - Robot ?start - RobotPose ?end - RobotPose)'
        self.pre = [#('(RobotAt ?robot ?start)', '{}:{}'.format(0, -1)),
                    #('(not (RobotAt ?robot ?end))', '{}:{}'.format(0, -1)),
                    ('(forall (?obj - Item)\
                        (not (Obstructs ?robot ?obj)))', '{}:{}'.format(1, end-1)),
                    ('(forall (?obj - Item)\
                        (Stationary ?obj))', '{}:{}'.format(0, end-1)),
                    ('(forall (?obs - Obstacle) (StationaryW ?obs))', '{}:{}'.format(0, end-1)),
                    ('(IsMP ?robot)', '{}:{}'.format(0, end-1)),
                    ('(WithinJointLimit ?robot)', '{}:{}'.format(0, end)),
                    ('(forall (?w - Obstacle) (not (RCollides ?robot ?w)))', '{}:{}'.format(1, end-1)),
                    # ('(not (RSelfCollides ?robot))', '0:{}'.format(end)),
                   ]

        self.eff = [#(' (not (RobotAt ?robot ?start))', '{}:{}'.format(end, end-1)),
                    #('(RobotAt ?robot ?end)', '{}:{}'.format(end, end-1)),
                   ]


class MoveArm(Move):
    def __init__(self, arm):
        super(MoveArm, self).__init__()
        self.arm = arm.lower()
        self.name = 'move_to_{}'.format(self.arm)
        arm = arm.lower().capitalize()
        self.pre.extend([('(forall (?obj - Item)\
                             (not (InGripper{} ?robot ?obj)))'.format(arm), '{}:{}'.format(0, 0)),
                         ('(forall (?obj - Item)\
                             (not (NearGripper{} ?robot ?obj)))'.format(arm), '{}:{}'.format(0, 0)),
                         ('(OpenGripper{} ?robot)'.format(arm), '{}:{}'.format(self.end-4, self.end-1))])


class MoveLeft(MoveArm):
    def __init__(self):
        super(MoveLeft, self).__init__('left')


class MoveRight(MoveArm):
    def __init__(self):
        super(MoveRight, self).__init__('right')


class MoveToGrasp(MoveArm):
    def __init__(self, arm):
        super(MoveToGrasp, self).__init__(arm)
        self.arm = arm.lower()
        arm = arm.lower().capitalize()
        self.name = 'move_to_grasp_{}'.format(self.arm)
        self.args = '(?robot - Robot ?item - Item ?targ - Reachable)'

        self.pre.extend([('(At ?item ?targ)', '0:0'),
                         ('(At ?item ?targ)', '{0}:{1}'.format(1, self.end)),
                         ('(not (EEAtXY{} ?robot ?item))'.format(arm), '{0}:{1}'.format(0, 0)),
                         ('(not (NearGripper{} ?robot ?item))'.format(arm), '0:0'),
                        ])

        self.eff.extend([#('(RightGripperDownRot ?robot)', '{0}:{1}'.format(3, self.end-1)),
                         ('(NearApproach{} ?robot ?item)'.format(arm), '{0}:{1}'.format(self.end, self.end)),
                         ('(NearApproach{}Rot ?robot ?item)'.format(arm), '{0}:{1}'.format(self.end, self.end)),
                         ('(NearApproach{} ?robot ?targ)'.format(arm), '{0}:{1}'.format(self.end, self.end-1)),
                         ('(forall (?obj - Item / ?item) (not (EEAtXY{} ?robot ?obj)))'.format(arm), \
                            '{0}:{1}'.format(self.end, self.end-1)),
                         ('(forall (?obj - Target / ?targ) (not (EEAtXY{} ?robot ?obj)))'.format(arm), \
                            '{0}:{1}'.format(self.end, self.end-1)),
                         ('(forall (?obj - Item / ?item) (not (NearApproach{} ?robot ?obj)))'.format(arm), \
                            '{0}:{1}'.format(self.end, self.end-1)),
                         ('(forall (?obj - Target / ?targ) (not (NearApproach{} ?robot ?obj)))'.format(arm), \
                            '{0}:{1}'.format(self.end, self.end-1)),
                         ])


class MoveToGraspLeft(MoveToGrasp):
    def __init__(self):
        super(MoveToGraspLeft, self).__init__('left')


class MoveToGraspRight(MoveToGrasp):
    def __init__(self):
        super(MoveToGraspRight, self).__init__('right')


class MoveHolding(Action):
    def __init__(self):
        self.name = 'moveholding'
        self.timesteps = 17
        end = self.timesteps - 1
        self.end = end
        self.args = '(?robot - Robot ?start - RobotPose ?end - RobotPose ?item - Item)'
        self.pre = [#('(RobotAt ?robot ?start)', '0:-1'),
                    #('(not (RobotAt ?robot ?end))', '{}:{}'.format(0, -1)),
                    ('(forall (?obj - Item)\
                        (not (ObstructsHolding ?robot ?obj ?item))\
                    )', '1:{}'.format(end)),
                    ('(forall (?obj - Item)\
                        (StationaryNEq ?obj ?item))', '{}:{}'.format(0, end-1)),
                    ('(forall (?obs - Obstacle) (StationaryW ?obs))', '0:{}'.format(end-1)),
                    ('(IsMP ?robot)', '0:{}'.format(end-1)),
                    ('(WithinJointLimit ?robot)', '0:{}'.format(end)),
                    # ('(not (RSelfCollides ?robot))', '0:{}'.format(end)),
                    ('(forall (?obs - Obstacle) (not (RCollides ?robot ?obs)))', '1:{}'.format(end-1))
                   ]

        self.eff = [#('(not (RobotAt ?robot ?start))', '{}:{}'.format(end, end-1)),
                    #('(RobotAt ?robot ?end)', '{}:{}'.format(end, end-1)),
                   ]


class MoveHoldingArm(MoveHolding):
    def __init__(self, arm):
        super(MoveHoldingArm, self).__init__()
        self.arm = arm.lower()
        arm = arm.lower().capitalize()
        self.name = 'move_holding_{}'.format(self.arm)
        self.pre.extend([
            ('(CloseGripper{} ?robot)'.format(arm), '1:{}'.format(self.end-1)),
            ('(NearGripper{} ?robot ?item)'.format(arm), '{0}:{1}'.format(0, 0)),
            ('(NearGripper{} ?robot ?item)'.format(arm), '{0}:{1}'.format(1, self.end))])


class MoveHoldingLeft(MoveHoldingArm):
    def __init__(self):
        super(MoveHoldingLeft, self).__init__('left')


class MoveHoldingRight(MoveHoldingArm):
    def __init__(self):
        super(MoveHoldingRight, self).__init__('right')


class MoveToPutdownArm(MoveHoldingArm):
    def __init__(self, arm):
        super(MoveToPutdownArm, self).__init__(arm)
        arm = arm.lower().capitalize()
        self.name = 'move_to_putdown_{}'.format(self.arm)
        self.args = '(?robot - Robot ?targ - Target ?item - Item)'

        self.pre.extend([('(forall (?obj - Item) (not (At ?obj ?targ)))', '0:0'),
                         ('(forall (?obj - Item) (not (Near ?obj ?targ)))', '0:0'),
                         ('({}GripperDownRot ?robot)'.format(arm), '{0}:{1}'.format(1, self.end-1)),
                         ('(not (EEAtXY{} ?robot ?targ))'.format(arm), '{0}:{1}'.format(0, 0)),
                         ('(not (NearGripper{} ?robot ?targ))'.format(arm), '0:0'),
                         ('(AboveTable ?item)', '{}:{}'.format(0, 0)),
                         ])

        self.eff.extend([('(NearApproach{} ?robot ?targ)'.format(arm), '{0}:{1}'.format(self.end, self.end)),
                         ('(EEAtXY{} ?robot ?targ)'.format(arm), '{0}:{1}'.format(self.end, self.end-1)),
                         ('(forall (?obj - Item / ?item) (not (EEAtXY{} ?robot ?obj)))'.format(arm), 
                            '{0}:{1}'.format(self.end, self.end-1)),
                         ('(forall (?obj - Target / ?targ) (not (EEAtXY{} ?robot ?obj)))'.format(arm), 
                            '{0}:{1}'.format(self.end, self.end-1)),
                         ('(forall (?reach - Item) (not (NearApproach{} ?robot ?reach)))'.format(arm), 
                            '{0}:{1}'.format(self.end, self.end-1)),
                         ('(forall (?reach - Target / ?targ) (not (NearApproach{} ?robot ?reach)))'.format(arm), 
                            '{0}:{1}'.format(self.end, self.end-1)),
                         ])


class MoveToPutdownLeft(MoveToPutdownArm):
    def __init__(self):
        super(MoveToPutdownLeft, self).__init__('left')


class MoveToPutdownRight(MoveToPutdownArm):
    def __init__(self):
        super(MoveToPutdownRight, self).__init__('right')


class Grasp(Action):
    def __init__(self):
        self.name = 'grasp'
        self.timesteps = 7 + 2 * const.EEREACHABLE_STEPS
        end = self.timesteps - 1
        self.end = end
        steps = const.EEREACHABLE_STEPS
        self.args = '(?robot - Robot ?item - Item ?target - Target)'
        grasp_time = end // 2
        self.grasp_time = grasp_time
        self.pre = [('(At ?item ?target)', '0:{}'.format(0)),
                    ('(At ?item ?target)', '1:{}'.format(grasp_time)),
                    ('(forall (?obj - Item) (not (HeightBlock ?item ?obj)))', '0:{}'.format(0)),
                    ('(forall (?obj - Item) (StationaryRot ?obj))', '0:{}'.format(grasp_time+const.EEREACHABLE_STEPS)),
                    ('(forall (?obj - Item) (Stationary ?obj))', '0:{}'.format(grasp_time-1)),
                    ('(forall (?obj - Item) (StationaryNEq ?obj ?item))', '0:{}'.format(end-1)),
                    ('(forall (?obs - Obstacle)(StationaryW ?obs))', '{}:{}'.format(0, end-1)),
                    ('(IsMP ?robot)', '0:{}'.format(end-1)),
                    ('(WithinJointLimit ?robot)', '0:{}'.format(end)),
                    ('(forall (?obs - Obstacle) (not (RCollides ?robot ?obs)))', '1:{}'.format(self.grasp_time-steps)),
                    ('(forall (?obs - Obstacle) (not (RCollides ?robot ?obs)))', '{0}:{1}'.format(self.grasp_time+1, self.end-1)),
                    ('(forall (?obj - Item) (not (Obstructs ?robot ?obj)))', '1:{}'.format(grasp_time-3)),
                    ('(forall (?obj - Item) (not (ObstructsHolding ?robot ?obj ?item)))', '{}:{}'.format(grasp_time-1, end-1))
                   ]

        self.eff = [#('(not (At ?item ?target))', '{}:{}'.format(end, end-1)) ,
                    #('(not (Near ?item ?target))', '{}:{}'.format(end, end-1)) ,
                    ('(AboveTable ?item)', '{}:{}'.format(end, end)),
                    ('(forall (?obj - Target) (not (At ?item ?obj)))', 
                        '{}:{}'.format(end, end-1)),
                    ('(forall (?obj - Target) (not (Near ?item ?obj)))', 
                        '{}:{}'.format(end, end-1)),
                    ('(not (Obstructs ?robot ?item))', '{}:{}'.format(end, end-1)),
                    ('(forall (?obj - Item) (not (ObstructsHolding ?robot ?item ?obj)))', '{}:{}'.format(end, end-1))
                   ]


class GraspArm(Grasp):
    def __init__(self, arm):
        super(GraspArm, self).__init__()
        steps = const.EEREACHABLE_STEPS
        self.arm = arm.lower()
        arm = arm.lower().capitalize()
        self.name = 'grasp_{}'.format(self.arm)
        self.pre.extend([('(NearApproach{} ?robot ?item)'.format(arm), '0:0'),
                        ('(not (InGripperRight ?robot ?item))', '0:-1'),
                        ('(not (InGripperLeft ?robot ?item))', '0:-1'),
                        ('(not (NearGripperRight ?robot ?item))', '0:-1'),
                        ('(not (NearGripperLeft ?robot ?item))', '0:-1'),
                        ('(EEApproach{} ?robot ?target)'.format(arm), '{}:{}'.format(self.grasp_time, self.grasp_time)),
                        ('(EERetreat{} ?robot ?target)'.format(arm), '{}:{}'.format(self.grasp_time, self.grasp_time)),
                        ('(EEAt{}Rot ?robot ?target)'.format(arm), '{}:{}'.format(self.grasp_time-steps, self.grasp_time+steps)),
                        ('(EEAtXY{} ?robot ?target)'.format(arm), '{}:{}'.format(self.grasp_time-steps, self.grasp_time+steps)),
                        ('(OpenGripper{} ?robot)'.format(arm), '{0}:{1}'.format(1,self.grasp_time)),
                        ('(CloseGripper{} ?robot)'.format(arm), '{0}:{1}'.format(self.grasp_time+1,self.end-1)),
                        ('(NearGripper{} ?robot ?item)'.format(arm), '{0}:{1}'.format(self.grasp_time, self.end-1)),
                        ('({}GripperDownRot ?robot)'.format(arm), '{0}:{1}'.format(1, self.end-1)),
                        ('(forall (?obj - Item) (not (InGripper{} ?robot ?item)))'.format(arm), '0:0'),
                        ('(forall (?obj - Item) (not (NearGripper{} ?robot ?item)))'.format(arm), '0:0'),
                        ])

        self.eff.extend([
                         #('(InGripper{} ?robot ?item)'.format(arm), '{0}:{1}'.format(self.end, self.end-1)),
                         ('(NearGripper{} ?robot ?item)'.format(arm), '{0}:{1}'.format(self.end, self.end)),
                         ('(not (NearApproach{} ?robot ?item))'.format(arm), '{0}:{1}'.format(self.end, self.end-1)),
                        ])


class GraspLeft(GraspArm):
    def __init__(self):
        super(GraspLeft, self).__init__('left')


class GraspRight(GraspArm):
    def __init__(self):
        super(GraspRight, self).__init__('right')


class Putdown(Action):
    def __init__(self):
        self.name = 'putdown'
        self.steps = const.EEREACHABLE_STEPS
        self.timesteps = 7 + 2 * const.EEREACHABLE_STEPS
        end = self.timesteps - 1
        self.end = end
        self.args = '(?robot - Robot ?target - Target ?item - Item)'
        putdown_time = end // 2
        approach_time = 5
        retreat_time = end-5
        self.putdown_time = putdown_time
        self.approach_time = approach_time
        self.retreat_time = retreat_time

        self.pre = [('(Near ?item ?target)', '{0}:{1}'.format(putdown_time, end-1)),
                    ('(At ?item ?target)', '{0}:{1}'.format(putdown_time, putdown_time)),
                    ('(forall (?obj - Item) (not (At ?obj ?target)))', '0:0'),
                    ('(forall (?obj - Item) (not (AtInit ?obj ?target)))', '0:-1'),
                    ('(forall (?obj - Item) (not (Near ?obj ?target)))', '0:0'),
                    ('(forall (?obj - Item) \
                        (Stationary ?obj))', '{0}:{1}'.format(putdown_time, end-1)),
                    ('(forall (?obj - Item)\
                        (StationaryNEq ?obj ?item))', '{}:{}'.format(0, end-1)),
                    ('(forall (?obs - Obstacle)\
                        (StationaryW ?obs)\
                    )', '{}:{}'.format(0, end-1)),
                    ('(IsMP ?robot)', '0:{}'.format(end-1)),
                    ('(WithinJointLimit ?robot)', '0:{}'.format(end)),
                    ('(forall (?obs - Obstacle)\
                        (not (RCollides ?robot ?obs))\
                    )', '1:{}'.format(self.putdown_time-1)),
                    ('(forall (?obs - Obstacle)\
                        (not (RCollides ?robot ?obs))\
                    )', '{0}:{1}'.format(self.putdown_time+1, self.end-1)),
                    ('(forall (?obj - Item)\
                        (not (Obstructs ?robot ?obj))\
                    )', '{}:{}'.format(putdown_time+3, end)),
                    ('(forall (?obj - Item)\
                        (not (ObstructsHolding ?robot ?obj ?item))\
                    )', '{}:{}'.format(1, putdown_time+2))
                   ]

        self.eff = [('(At ?item ?target)', '{}:{}'.format(end, end-1)) ,
                    ('(not (AboveTable ?item))', '{}:{}'.format(end, end)),
                    ('(Near ?item ?target)', '{}:{}'.format(end, end)),
                    ('(forall (?obj - Target / ?target) (not (At ?item ?obj)))', 
                        '{}:{}'.format(end, end-1)),
                    ('(forall (?obj - Target / ?target) (not (Near ?item ?obj)))', 
                        '{}:{}'.format(end, end-1)),
                    ('(not (Obstructs ?robot ?item))', '{}:{}'.format(end, end-1)),
                    ('(forall (?obj - Item) \
                        (not (ObstructsHolding ?robot ?item ?obj))\
                    )', '{}:{}'.format(end, end-1)),
                    ('(forall (?obj - Item) \
                        (not (HeightBlock ?obj ?item))\
                    )', '{}:{}'.format(end, end-1)),
        ]


class PutdownArm(Putdown):
    def __init__(self, arm):
        super(PutdownArm, self).__init__()
        self.arm = arm.lower()
        arm = arm.lower().capitalize()
        self.name = 'putdown_{}'.format(self.arm)
        self.pre.extend([('(NearApproach{} ?robot ?target)'.format(arm), '0:0'),
                         ('(NearGripper{} ?robot ?item)'.format(arm), '0:0'),
                         ('(NearGripper{} ?robot ?item)'.format(arm), '1:{}'.format(self.putdown_time)),
                         ('(not (NearGripper{} ?robot ?item))'.format(arm), 
                             '{}:{}'.format(self.putdown_time+self.steps, self.end-1)),
                         ('(EEApproach{} ?robot ?target)'.format(arm), 
                             '{}:{}'.format(self.putdown_time, self.putdown_time)),
                         ('(EERetreat{} ?robot ?target)'.format(arm), 
                             '{}:{}'.format(self.putdown_time, self.putdown_time)),
                         ('(EEAt{}Rot ?robot ?target)'.format(arm), 
                             '{}:{}'.format(self.putdown_time-self.steps, self.putdown_time+self.steps)),
                         ('(EEAtXY{} ?robot ?target)'.format(arm), 
                             '{}:{}'.format(self.putdown_time-self.steps, self.putdown_time+self.steps)),
                         ('(CloseGripper{} ?robot)'.format(arm), 
                             '{}:{}'.format(1,  self.putdown_time-1)),
                         ('(OpenGripper{} ?robot)'.format(arm), 
                             '{}:{}'.format(self.putdown_time,  self.end-1)),
                         ('(forall (?obj - Item)\
                             (not (InGripper{} ?robot ?item))\
                             )'.format(arm), '{0}:{1}'.format(self.end, self.end)),
                         ])

        self.eff.extend([('(forall (?obj - Item) \
                             (not (InGripper{} ?robot ?obj)))'.format(arm), '{0}:{1}'.format(self.end, self.end)),
                         ('(forall (?obj - Item) \
                             (not (NearGripper{} ?robot ?obj)))'.format(arm), '{0}:{1}'.format(self.end, self.end)),
                         #('(not (InGripper{} ?robot ?item))'.format(arm), '{0}:{1}'.format(self.end, self.end)),
                         #('(not (NearGripper{} ?robot ?item))'.format(arm), '{0}:{1}'.format(self.end, self.end)),
                         ('(NearApproach{} ?robot ?item)'.format(arm), '{0}:{1}'.format(self.end, self.end-1)),
                         ('(NearApproach{} ?robot ?target)'.format(arm), '{0}:{1}'.format(self.end, self.end)),
                         ('(forall (?obj - Item / ?item) (not (EEAtXY{} ?robot ?obj)))'.format(arm), 
                            '{0}:{1}'.format(self.end, self.end-1)),
                         ('(forall (?obj - Target / ?target) (not (EEAtXY{} ?robot ?obj)))'.format(arm), 
                            '{0}:{1}'.format(self.end, self.end-1)),
                         ('(forall (?reach - Item / ?item) (not (NearApproach{} ?robot ?reach)))'.format(arm), 
                            '{0}:{1}'.format(self.end, self.end-1)),
                         ('(forall (?reach - Target / ?target) (not (NearApproach{} ?robot ?reach)))'.format(arm), 
                            '{0}:{1}'.format(self.end, self.end-1)),
                       ])


class PutdownLeft(PutdownArm):
    def __init__(self):
        super(PutdownLeft, self).__init__('left')


class PutdownRight(PutdownArm):
    def __init__(self):
        super(PutdownRight, self).__init__('right')


class Hold(Action):
    def __init__(self):
        self.name = 'hold'
        self.timesteps = 7 + const.EEREACHABLE_STEPS
        end = self.timesteps - 1
        self.end = end
        self.args = '(?robot - Robot ?item - Item ?target - Reachable ?sp - RobotPose ?ep - RobotPose)'
        grasp_time = self.end
        self.grasp_time = grasp_time
        steps = const.EEREACHABLE_STEPS
        self.pre = [('(At ?item ?target)', '0:0'),
                    ('(At ?item ?target)', '1:{}'.format(end)),
                    ('(RobotAt ?robot ?sp)', '0:-1'),
                    ('(not (RobotAt ?robot ?ep))', '{}:{}'.format(0, 0)),
                    ('(forall (?obj - Item) (StationaryRot ?obj))', '0:{}'.format(end-1)),
                    ('(forall (?obj - Item) (StationaryNEq ?obj ?item))', '0:{}'.format(end-1)),
                    ('(forall (?obj - Item) (Stationary ?obj))', '0:{}'.format(end-1)),
                    ('(forall (?obs - Obstacle)(StationaryW ?obs))', '{}:{}'.format(0, end-1)),
                    ('(IsMP ?robot)', '0:{}'.format(end-1)),
                    ('(WithinJointLimit ?robot)', '0:{}'.format(end)),
                    ('(forall (?obs - Obstacle) (not (RCollides ?robot ?obs)))', '1:{}'.format(self.grasp_time-steps)),
                    ('(forall (?obj - Item) (not (Obstructs ?robot ?obj)))', '1:{}'.format(grasp_time-steps)),
                    ('(forall (?obj - Item) (not (ObstructsHolding ?robot ?obj ?item)))', '{}:{}'.format(grasp_time-3, end-1))
                   ]

        self.eff = [('(not (RobotAt ?robot ?sp))', '{}:{}'.format(end, end-1)),
                    ('(RobotAt ?robot ?ep)', '{}:{}'.format(end, end-1)),
                   ]


class HoldArm(Hold):
    def __init__(self, arm):
        super(HoldArm, self).__init__()
        steps = const.EEREACHABLE_STEPS
        self.arm = arm.lower()
        arm = arm.lower().capitalize()
        self.name = 'hold_{}'.format(self.arm)
        self.pre.extend([('(NearApproach{} ?robot ?item)'.format(arm), '0:0'),
                        ('(not (InGripperRight ?robot ?item))', '0:0'),
                        ('(not (InGripperLeft ?robot ?item))', '0:0'),
                        ('(not (NearGripperRight ?robot ?item))', '0:0'),
                        ('(not (NearGripperLeft ?robot ?item))', '0:0'),
                        ('(EEApproach{} ?robot ?item)'.format(arm), '{}:{}'.format(self.grasp_time-1, self.grasp_time-1)),
                        #('(EEAt{}Rot ?robot ?item)'.format(arm), '{}:{}'.format(self.grasp_time-steps+1, self.grasp_time-1)),
                        ('(OpenGripper{} ?robot)'.format(arm), '{0}:{1}'.format(1,self.grasp_time-1)),
                        ('(NearGripper{} ?robot ?item)'.format(arm), '{0}:{1}'.format(self.grasp_time, self.end-1)),
                        ('(forall (?obj - Item) (not (InGripper{} ?robot ?item)))'.format(arm), '0:{}'.format(0)),
                        ('(forall (?obj - Item) (not (NearGripper{} ?robot ?item)))'.format(arm), '0:0'),
                        ])

        self.eff.extend([('(InGripper{} ?robot ?item)'.format(arm), '{0}:{1}'.format(self.end, self.end-1)),
                         ('(NearGripper{} ?robot ?item)'.format(arm), '{0}:{1}'.format(self.end-1, self.end)),
                         ('(EEAtXY{} ?robot ?target)'.format(arm), '{}:{}'.format(self.end, self.end-1)),
                         ('(EEAtXZ{} ?robot ?target)'.format(arm), '{}:{}'.format(self.end, self.end-1)),
                         ('(EEAtRelXY{} ?robot ?target)'.format(arm), '{}:{}'.format(self.end, self.end-1)),
                         ('(EEAtRelXZ{} ?robot ?target)'.format(arm), '{}:{}'.format(self.end, self.end-1)),
                         ('(not (NearApproach{} ?robot ?item))'.format(arm), '{0}:{1}'.format(self.end, self.end-1)),
                         ('(forall (?reach - Reachable) (not (Approach{} ?robot ?reach)))'.format(arm), 
                            '{0}:{1}'.format(self.end, self.end-1)),
                         ('(forall (?reach - Reachable) (not (NearApproach{} ?robot ?reach)))'.format(arm), 
                            '{0}:{1}'.format(self.end, self.end-1)),
                        ])


class HoldLeft(HoldArm):
    def __init__(self):
        super(HoldLeft, self).__init__('left')


class HoldRight(HoldArm):
    def __init__(self):
        super(HoldRight, self).__init__('right')


class Lift(Action):
    def __init__(self):
        self.name = 'lift'
        self.timesteps = 2 + const.EEREACHABLE_STEPS
        end = self.timesteps - 1
        self.end = end
        self.args = '(?robot - Robot ?item - Item ?target - Reachable ?sp - RobotPose ?ep - RobotPose)'
        self.pre = [('(At ?item ?target)', '0:0'),
                    ('(not (Lifted ?item ?robot))', '{}:{}'.format(0, -1)),
                    ('(RobotAt ?robot ?sp)', '0:-1'),
                    ('(not (RobotAt ?robot ?ep))', '{}:{}'.format(0, 0)),
                    #('(forall (?obj - Item) (not (HeightBlock ?item ?obj)))', '0:{}'.format(0)),
                    ('(forall (?obj - Item) (StationaryRot ?obj))', '0:{}'.format(end-1)),
                    ('(forall (?obj - Item) (StationaryNEq ?obj ?item))', '0:{}'.format(end-1)),
                    ('(forall (?obs - Obstacle)(StationaryW ?obs))', '{}:{}'.format(0, end-1)),
                    ('(IsMP ?robot)', '0:{}'.format(end-1)),
                    ('(WithinJointLimit ?robot)', '0:{}'.format(end)),
                    ('(forall (?obs - Obstacle) (not (RCollides ?robot ?obs)))', '1:{}'.format(end)),
                    ('(forall (?obj - Item) (not (ObstructsHolding ?robot ?obj ?item)))', '{}:{}'.format(1, end))
                   ]

        self.eff = [('(not (At ?item ?target))', '{}:{}'.format(end, end-1)),
                    ('(not (Near ?item ?target))', '{}:{}'.format(end, end-1)),
                    ('(Lifted ?item ?robot)', '{}:{}'.format(end, end-1)),
                    ('(not (RobotAt ?robot ?sp))', '{}:{}'.format(end, end-1)),
                    ('(RobotAt ?robot ?ep)', '{}:{}'.format(end, end-1)),
                    #('(forall (?obj - Reachable) (not (At ?item ?obj)))', 
                    #    '{}:{}'.format(end, end-1)),
                    #('(forall (?obj - Reachable) (not (Near ?item ?obj)))', 
                    #    '{}:{}'.format(end, end-1)),
                    ('(not (Obstructs ?robot ?item))', '{}:{}'.format(end, end-1)),
                    ('(forall (?obj - Item) (not (ObstructsHolding ?robot ?item ?obj)))', '{}:{}'.format(end, end-1))
                   ]


class LiftArm(Lift):
    def __init__(self, arm):
        super(LiftArm, self).__init__()
        steps = const.EEREACHABLE_STEPS
        self.arm = arm.lower()
        arm = arm.lower().capitalize()
        self.name = 'lift_{}'.format(self.arm)
        self.pre.extend([('(NearGripper{} ?robot ?item)'.format(arm), '0:0'),
                        ('(NearGripper{} ?robot ?item)'.format(arm), '{0}:{1}'.format(1, self.end-1)),
                        #('(EERetreat{} ?robot ?target)'.format(arm), '{}:{}'.format(0, 0)),
                        ('(EEAt{}Rot ?robot ?target)'.format(arm), '{}:{}'.format(1, self.end-1)),
                        ('(CloseGripper{} ?robot)'.format(arm), '{0}:{1}'.format(1,self.end-1)),
                        ])

        self.eff.extend([('(InGripper{} ?robot ?item)'.format(arm), '{0}:{1}'.format(self.end, self.end-1)),
                         ('(NearGripper{} ?robot ?item)'.format(arm), '{0}:{1}'.format(self.end, self.end)),
                         #('(NearApproach{} ?robot ?target)'.format(arm), '{0}:{1}'.format(self.end, self.end-1)),
                        ])


class LiftLeft(LiftArm):
    def __init__(self):
        super(LiftLeft, self).__init__('left')


class LiftRight(LiftArm):
    def __init__(self):
        super(LiftRight, self).__init__('right')


class Place(Action):
    def __init__(self):
        self.name = 'place'
        self.steps = const.EEREACHABLE_STEPS
        self.timesteps = 7 + 2 * const.EEREACHABLE_STEPS
        end = self.timesteps - 1
        self.end = end
        self.args = '(?robot - Robot ?target - Target ?item - Item ?sp - RobotPose ?ep - RobotPose)'
        putdown_time = end // 2
        approach_time = 5
        retreat_time = end-5
        self.putdown_time = putdown_time
        self.approach_time = approach_time
        self.retreat_time = retreat_time

        self.pre = [('(Near ?item ?target)', '{0}:{1}'.format(putdown_time, end-1)),
                    ('(At ?item ?target)', '{0}:{1}'.format(putdown_time, putdown_time)),
                    ('(Lifted ?item ?robot)', '{0}:{1}'.format(0, -1)),
                    #('(forall (?obj - Item) (not (At ?obj ?target)))', '0:0'),
                    #('(forall (?obj - Item) (not (Near ?obj ?target)))', '0:0'),
                    ('(RobotAt ?robot ?sp)', '0:-1'),
                    ('(not (RobotAt ?robot ?ep))', '{}:{}'.format(0, -1)),
                    ('(forall (?obj - Item) \
                        (Stationary ?obj))', '{0}:{1}'.format(putdown_time, end-1)),
                    ('(forall (?obj - Item)\
                        (StationaryNEq ?obj ?item))', '{}:{}'.format(0, end-1)),
                    ('(forall (?obs - Obstacle)\
                        (StationaryW ?obs)\
                    )', '{}:{}'.format(0, end-1)),
                    ('(IsMP ?robot)', '0:{}'.format(end-1)),
                    ('(WithinJointLimit ?robot)', '0:{}'.format(end)),
                    ('(forall (?obs - Obstacle)\
                        (not (RCollides ?robot ?obs))\
                    )', '1:{}'.format(self.putdown_time-1)),
                    ('(forall (?obs - Obstacle)\
                        (not (RCollides ?robot ?obs))\
                    )', '{0}:{1}'.format(self.putdown_time+1, self.end-1)),
                    ('(forall (?obj - Item)\
                        (not (Obstructs ?robot ?obj))\
                    )', '{}:{}'.format(putdown_time+3, end)),
                    ('(forall (?obj - Item)\
                        (not (ObstructsHolding ?robot ?obj ?item))\
                    )', '{}:{}'.format(1, putdown_time+2))
                   ]

        self.eff = [('(At ?item ?target)', '{}:{}'.format(end, end-1)) ,
                    ('(not (Lifted ?item ?robot))', '{0}:{1}'.format(end, end-1)),
                    ('(Near ?item ?target)', '{}:{}'.format(end, end)) ,
                    ('(not (RobotAt ?robot ?sp))', '{}:{}'.format(end, end-1)),
                    ('(RobotAt ?robot ?ep)', '{}:{}'.format(end, end-1)),
                    #('(forall (?obj - Reachable / ?target) (not (At ?item ?obj)))', 
                    #    '{}:{}'.format(end, end-1)),
                    #('(forall (?obj - Reachable / ?target) (not (Near ?item ?obj)))', 
                    #    '{}:{}'.format(end, end-1)),
                    ('(not (Obstructs ?robot ?item))', '{}:{}'.format(end, end-1)),
                    ('(forall (?obj - Item) \
                        (not (ObstructsHolding ?robot ?item ?obj))\
                    )', '{}:{}'.format(end, end-1)),
                    ('(forall (?obj - Item) \
                        (not (HeightBlock ?obj ?item))\
                    )', '{}:{}'.format(end, end-1)),
        ]


class PlaceArm(Place):
    def __init__(self, arm):
        super(PlaceArm, self).__init__()
        self.arm = arm.lower()
        arm = arm.lower().capitalize()
        self.name = 'place_{}'.format(self.arm)
        self.pre.extend([('(NearGripper{} ?robot ?item)'.format(arm), '0:0'),
                         ('(NearGripper{} ?robot ?item)'.format(arm), '1:{}'.format(self.putdown_time)),
                         ('(not (NearGripper{} ?robot ?item))'.format(arm), 
                             '{}:{}'.format(self.putdown_time+self.steps, self.end-1)),
                         ('(EEApproach{} ?robot ?target)'.format(arm), 
                             '{}:{}'.format(self.putdown_time, self.putdown_time)),
                         ('(EERetreat{} ?robot ?target)'.format(arm), 
                             '{}:{}'.format(self.putdown_time, self.putdown_time)),
                         ('(EEAt{}Rot ?robot ?target)'.format(arm), 
                             '{}:{}'.format(self.putdown_time-self.steps+1, self.putdown_time+self.steps-1)),
                         ('(CloseGripper{} ?robot)'.format(arm), 
                             '{}:{}'.format(1,  self.putdown_time-1)),
                         ('(OpenGripper{} ?robot)'.format(arm), 
                             '{}:{}'.format(self.putdown_time,  self.end-1)),
                         ])

        self.eff.extend([('(forall (?obj - Item) \
                             (not (InGripper{} ?robot ?obj)))'.format(arm), '{0}:{0}'.format(self.end)),
                         ('(forall (?obj - Item) \
                             (not (NearGripper{} ?robot ?obj)))'.format(arm), '{0}:{0}'.format(self.end)),
                         ('(NearApproach{} ?robot ?item)'.format(arm), '{0}:{1}'.format(self.end, self.end-1)),
                         ('(NearApproach{} ?robot ?target)'.format(arm), '{0}:{1}'.format(self.end, self.end-1)),
                         ('(forall (?reach - Item / ?item) (not (NearApproach{} ?robot ?reach)))'.format(arm), 
                            '{0}:{1}'.format(self.end, self.end-1)),
                         ('(forall (?reach - Target / ?target) (not (NearApproach{} ?robot ?reach)))'.format(arm), 
                            '{0}:{1}'.format(self.end, self.end-1)),
                       ])


class PlaceLeft(PlaceArm):
    def __init__(self):
        super(PlaceLeft, self).__init__('left')


class PlaceRight(PlaceArm):
    def __init__(self):
        super(PlaceRight, self).__init__('right')


class Slide(Action):
    def __init__(self):
        self.name = 'slide'
        self.steps = const.EEREACHABLE_STEPS
        self.timesteps = 7 + 2 * const.EEREACHABLE_STEPS
        end = self.timesteps - 1
        self.end = end
        self.args = '(?robot - Robot ?target - SlideTarget ?item - Item ?sp - RobotPose ?ep - RobotPose)'
        putdown_time = end // 2
        approach_time = 5
        retreat_time = end-5
        self.putdown_time = putdown_time
        self.approach_time = approach_time
        self.retreat_time = retreat_time

        self.pre = [('(Near ?item ?target)', '{0}:{1}'.format(putdown_time, end-1)),
                    ('(At ?item ?target)', '{0}:{1}'.format(putdown_time, putdown_time)),
                    #('(forall (?obj - Item) (not (At ?obj ?target)))', '0:0'),
                    #('(forall (?obj - Item) (not (Near ?obj ?target)))', '0:0'),
                    ('(RobotAt ?robot ?sp)', '0:-1'),
                    ('(not (RobotAt ?robot ?ep))', '{}:{}'.format(0, -1)),
                    ('(forall (?obj - Item) \
                        (Stationary ?obj))', '{0}:{1}'.format(putdown_time, end-1)),
                    ('(forall (?obj - Item)\
                        (StationaryNEq ?obj ?item))', '{}:{}'.format(0, end-1)),
                    ('(forall (?obs - Obstacle)\
                        (StationaryW ?obs)\
                    )', '{}:{}'.format(0, end-1)),
                    ('(IsMP ?robot)', '0:{}'.format(end-1)),
                    ('(WithinJointLimit ?robot)', '0:{}'.format(end)),
                    ('(forall (?obs - Obstacle)\
                        (not (RCollides ?robot ?obs))\
                    )', '1:{}'.format(self.putdown_time-1)),
                    ('(forall (?obs - Obstacle)\
                        (not (RCollides ?robot ?obs))\
                    )', '{0}:{1}'.format(self.putdown_time+1, self.end-1)),
                    ('(forall (?obj - Item)\
                        (not (Obstructs ?robot ?obj))\
                    )', '{}:{}'.format(putdown_time+3, end)),
                    ('(forall (?obj - Item)\
                        (not (ObstructsHolding ?robot ?obj ?item))\
                    )', '{}:{}'.format(1, putdown_time+2))
                   ]

        self.eff = [('(At ?item ?target)', '{}:{}'.format(end, end-1)) ,
                    ('(Near ?item ?target)', '{}:{}'.format(end, end)) ,
                    ('(not (RobotAt ?robot ?sp))', '{}:{}'.format(end, end-1)),
                    ('(RobotAt ?robot ?ep)', '{}:{}'.format(end, end-1)),
                    #('(forall (?obj - Reachable / ?target) (not (At ?item ?obj)))', 
                    #    '{}:{}'.format(end, end-1)),
                    #('(forall (?obj - Reachable / ?target) (not (Near ?item ?obj)))', 
                    #    '{}:{}'.format(end, end-1)),
                    ('(not (Obstructs ?robot ?item))', '{}:{}'.format(end, end-1)),
                    ('(not (RCollides ?robot ?item))', '{}:{}'.format(end, end-1)),
                    ('(forall (?obj - Item) \
                        (not (ObstructsHolding ?robot ?item ?obj))\
                    )', '{}:{}'.format(end, end-1)),
        ]


class SlideArm(Place):
    def __init__(self, arm):
        super(SlideArm, self).__init__()
        self.arm = arm.lower()
        arm = arm.lower().capitalize()
        self.name = 'slide_{}'.format(self.arm)
        self.pre.extend([('(NearGripper{} ?robot ?item)'.format(arm), '0:0'),
                         ('(NearGripper{} ?robot ?item)'.format(arm), '1:{}'.format(self.putdown_time)),
                         ('(not (NearGripper{} ?robot ?item))'.format(arm), 
                             '{}:{}'.format(self.putdown_time+self.steps, self.end-1)),
                         ('(EEAt{}Rot ?robot ?target)'.format(arm), 
                             '{}:{}'.format(self.putdown_time-self.steps+1, self.putdown_time+self.steps-1)),
                         ('(EEAtRelXZ{} ?robot ?target)'.format(arm), '{}:{}'.format(0, 0)),
                         ('(EEAtRelXZ{} ?robot ?target)'.format(arm), '{}:{}'.format(1, self.end-1)),
                         ('(CloseGripper{} ?robot)'.format(arm), 
                             '{}:{}'.format(1,  self.putdown_time-1)),
                         ('(OpenGripper{} ?robot)'.format(arm), 
                             '{}:{}'.format(self.putdown_time,  self.end-1)),
                         ])

        self.eff.extend([('(forall (?obj - Item) \
                             (not (InGripper{} ?robot ?obj)))'.format(arm), '{0}:{0}'.format(self.end)),
                         ('(forall (?obj - Item) \
                             (not (NearGripper{} ?robot ?obj)))'.format(arm), '{0}:{0}'.format(self.end)),
                         ('(NearApproach{} ?robot ?item)'.format(arm), '{0}:{1}'.format(self.end, self.end-1)),
                         ('(NearApproach{} ?robot ?target)'.format(arm), '{0}:{1}'.format(self.end, self.end-1)),
                         ('(not (EEAtRelXZ{} ?robot ?target))'.format(arm), '{}:{}'.format(self.end, self.end)),
                         ('(forall (?obj - Item / ?item) (not (EEAtXY{} ?robot ?obj)))'.format(arm), 
                            '{0}:{1}'.format(self.end, self.end-1)),
                         ('(forall (?obj - Target / ?target) (not (EEAtXY{} ?robot ?obj)))'.format(arm), 
                            '{0}:{1}'.format(self.end, self.end-1)),
                         ('(forall (?reach - Item / ?item) (not (NearApproach{} ?robot ?reach)))'.format(arm), 
                            '{0}:{1}'.format(self.end, self.end-1)),
                         ('(forall (?reach - Target / ?target) (not (NearApproach{} ?robot ?reach)))'.format(arm), 
                            '{0}:{1}'.format(self.end, self.end-1)),
                       ])


class SlideLeft(SlideArm):
    def __init__(self):
        super(SlideLeft, self).__init__('left')


class SlideRight(SlideArm):
    def __init__(self):
        super(SlideRight, self).__init__('right')


class SlideDoor(Action):
    def __init__(self, open_door=True):
        self.name = 'slide_open' if open_door else 'slide_close'
        self.steps = const.EEREACHABLE_STEPS
        self.timesteps = 7 + 2 * const.EEREACHABLE_STEPS
        end = self.timesteps - 1
        self.end = end
        self.args = '(?robot - Robot ?door - Door ?item - Item ?sp - RobotPose ?ep - RobotPose)'
        putdown_time = end // 2
        approach_time = 5
        retreat_time = end-5
        self.putdown_time = putdown_time
        self.approach_time = approach_time
        self.retreat_time = retreat_time

        self.pre = [('(SlideDoorAt ?item ?door)', '{0}:{1}'.format(0, 0)),
                    ('(SlideDoorAt ?item ?door)', '{0}:{1}'.format(1, end)),
                    ('(RobotAt ?robot ?sp)', '0:-1'),
                    ('(not (RobotAt ?robot ?ep))', '{}:{}'.format(0, -1)),
                    ('(forall (?obj - Item) \
                        (Stationary ?obj))', '{0}:{1}'.format(putdown_time, end-1)),
                    ('(forall (?obj - Item)\
                        (StationaryNEq ?obj ?item))', '{}:{}'.format(0, end-1)),
                    ('(forall (?obs - Obstacle)\
                        (StationaryWBase ?obs)\
                    )', '{}:{}'.format(0, end-1)),
                    ('(IsMP ?robot)', '0:{}'.format(end-1)),
                    ('(WithinJointLimit ?robot)', '0:{}'.format(end)),
                    #('(forall (?obs - Obstacle)\
                    #    (not (RCollides ?robot ?obs))\
                    #)', '1:{}'.format(self.putdown_time-1)),
                    ('(forall (?obs - Obstacle)\
                        (not (RCollides ?robot ?obs))\
                    )', '{0}:{1}'.format(self.putdown_time+1, self.end-1)),
                    ('(forall (?obj - Item)\
                        (not (Obstructs ?robot ?obj))\
                    )', '{}:{}'.format(putdown_time+3, end)),
                    ('(forall (?obj - Item)\
                        (not (ObstructsHolding ?robot ?obj ?item))\
                    )', '{}:{}'.format(1, putdown_time+2))
                   ]

        if open_door:
            self.pre.append(('(not (SlideDoorOpen ?item ?door))', '{0}:{1}'.format(0, 0)))
        else:
            self.pre.append(('(not (SlideDoorClose ?item ?door))', '{0}:{1}'.format(0, 0)))

        self.eff = [('(not (RobotAt ?robot ?sp))', '{}:{}'.format(end, end-1)),
                    ('(RobotAt ?robot ?ep)', '{}:{}'.format(end, end-1)),
                    ('(not (Obstructs ?robot ?item))', '{}:{}'.format(end, end-1)),
                    ('(not (RCollides ?robot ?item))', '{}:{}'.format(end, end-1)),
                    ('(forall (?obj - Item) \
                        (not (ObstructsHolding ?robot ?item ?obj))\
                    )', '{}:{}'.format(end, end-1)),
        ]

        if open_door:
            self.eff.append(('(SlideDoorOpen ?item ?door)', '{0}:{1}'.format(putdown_time, end-1)))
            self.eff.append(('(not (SlideDoorClose ?item ?door))', '{0}:{1}'.format(end, end)))
        else:
            self.eff.append(('(SlideDoorClose ?item ?door)', '{0}:{1}'.format(putdown_time, end-1)))
            self.eff.append(('(not (SlideDoorOpen ?item ?door))', '{0}:{1}'.format(end, end)))


class SlideDoorArm(SlideDoor):
    def __init__(self, arm, open_door=True):
        super(SlideDoorArm, self).__init__(open_door)
        self.arm = arm.lower()
        arm = arm.lower().capitalize()
        mode = 'open' if open_door else 'close'
        self.name = 'slide_{}_{}'.format(mode, self.arm)
        self.pre.extend([('(NearGripper{} ?robot ?item)'.format(arm), '0:0'),
                         ('(NearGripper{} ?robot ?item)'.format(arm), '1:{}'.format(self.putdown_time)),
                         ('(not (NearGripper{} ?robot ?item))'.format(arm), 
                             '{}:{}'.format(self.putdown_time+self.steps, self.end-1)),
                         ('(EEAt{}Rot ?robot ?target)'.format(arm), 
                             '{}:{}'.format(self.putdown_time-self.steps+1, self.putdown_time+self.steps-1)),
                         #('(EEAtRelXZ{} ?robot ?item)'.format(arm), '{}:{}'.format(1, self.putdown_time)),
                         ('(EERetreat{} ?robot ?item)'.format(arm), 
                             '{}:{}'.format(self.putdown_time, self.putdown_time)),
                         ('(CloseGripper{} ?robot)'.format(arm), 
                             '{}:{}'.format(1,  self.putdown_time-1)),
                         ('(OpenGripper{} ?robot)'.format(arm), 
                             '{}:{}'.format(self.putdown_time,  self.end-1)),
                         ])

        self.eff.extend([('(forall (?obj - Item) \
                             (not (InGripper{} ?robot ?obj)))'.format(arm), '{0}:{0}'.format(self.end)),
                         ('(forall (?obj - Item) \
                             (not (NearGripper{} ?robot ?obj)))'.format(arm), '{0}:{0}'.format(self.end)),
                         ('(NearApproach{} ?robot ?item)'.format(arm), '{0}:{1}'.format(self.end, self.end-1)),
                       ])


class SlideOpenLeft(SlideDoorArm):
    def __init__(self):
        super(SlideOpenLeft, self).__init__('left')


class SlideOpenRight(SlideDoorArm):
    def __init__(self):
        super(SlideOpenRight, self).__init__('right')


class SlideCloseLeft(SlideDoorArm):
    def __init__(self):
        super(SlideCloseLeft, self).__init__('left', False)


class SlideCloseRight(SlideDoorArm):
    def __init__(self):
        super(SlideCloseRight, self).__init__('right', False)


actions = [MoveToGraspRight(), MoveToPutdownRight(), GraspRight(), PutdownRight()]
right_dom_str = dom_str
for action in actions:
    right_dom_str += '\n\n'
    print(action.name)
    right_dom_str += action.to_str()
# removes all the extra spaces
right_dom_str = right_dom_str.replace('            ', '')
right_dom_str = right_dom_str.replace('    ', '')
right_dom_str = right_dom_str.replace('    ', '')
print(right_dom_str)
f = open('right_robot.domain', 'w')
f.write(right_dom_str)



### RIGHT DESK DOMAIN
actions = [MoveToGraspRight(), HoldRight(), LiftRight(), \
           SlideOpenRight(), SlideCloseRight(), PlaceRight()]
right_dom_str = dom_str
for action in actions:
    right_dom_str += '\n\n'
    print(action.name)
    right_dom_str += action.to_str()
right_dom_str = right_dom_str.replace('            ', '')
right_dom_str = right_dom_str.replace('    ', '')
right_dom_str = right_dom_str.replace('    ', '')
print(right_dom_str)
f = open('right_desk.domain', 'w')
f.write(right_dom_str)

